{"version":3,"sources":["webgl-app/utils/math.js","webgl-app/utils/query-params.js","webgl-app/rendering/graphics.js","webgl-app/settings.js","webgl-app/rendering/resize.js","webgl-app/rendering/render-target.js","webgl-app/rendering/post-processing/passes/transition-pass/shader.glsl.js","webgl-app/cameras/cameras.js","webgl-app/utils/gui.js","webgl-app/utils/canvas.js","webgl-app/rendering/preload-gpu.js","webgl-app/loading/asset.js","webgl-app/loading/loaders/loader.js","webgl-app/loading/loaders/image-loader.js","webgl-app/loading/loaders/json-loader.js","webgl-app/loading/loaders/three-texture-loader.js","webgl-app/loading/loaders/three-fbx-loader.js","webgl-app/loading/loaders/three-gltf-loader.js","webgl-app/loading/loaders/group-loader.js","webgl-app/loading/asset-loader.js","webgl-app/loading/asset-manager.js","webgl-app/scenes/base/base-scene.js","webgl-app/utils/dispose-objects.js","webgl-app/rendering/post-processing/passes/transition-pass/transition-pass.js","webgl-app/rendering/post-processing/passes/fxaa.glsl.js","webgl-app/shaders/math.glsl.js","webgl-app/rendering/post-processing/passes/film.glsl.js","webgl-app/rendering/post-processing/passes/final-pass/shader.glsl.js","webgl-app/rendering/post-processing/passes/final-pass/final-pass.js","webgl-app/scenes/empty/empty-scene.js","webgl-app/rendering/post-processing/post-processing.js","webgl-app/utils/geometry.js","webgl-app/rendering/renderer.js","webgl-app/utils/render-stats.js","webgl-app/utils/stats.js","webgl-app/scenes/preloader/preloader-scene.js","webgl-app/app-state.js","webgl-app/utils/material-modifier.js","webgl-app/shaders/noise.glsl.js","webgl-app/scenes/landing/objects/sphere/shader.glsl.js","webgl-app/interaction/touch-controls.js","webgl-app/interaction/interactive-object.js","webgl-app/scenes/landing/objects/sphere/sphere.js","webgl-app/lights/ambient.js","webgl-app/lights/directional.js","webgl-app/scenes/landing/assets.js","webgl-app/scenes/landing/objects/background/background.js","webgl-app/scenes/landing/objects/background/shader.glsl.js","webgl-app/scenes/landing/landing-scene.js","webgl-app/scenes/camera-transitions/assets.js","webgl-app/cameras/camera-dolly/camera-dolly.js","webgl-app/cameras/camera-dolly/camera-dolly-manager.js","webgl-app/scenes/camera-transitions/camera-transitions-scene.js","webgl-app/utils/screenshot.js","webgl-app/webgl-app.js","App.js","index.js"],"names":["TWO_PI","Math","PI","VECTOR_ZERO","Vector3","VECTOR_ONE","Math3","queryString","require","getQueryFromParams","prop","params","parse","window","location","search","undefined","setQuery","query","val","reload","queries","newQueries","Object","assign","stringified","stringify","href","pathname","url","protocol","host","history","pushState","path","GRAPHICS_MODES","GRAPHICS_MODE","getGraphicsMode","gpuTier","getGPUTier","graphicsMode","includes","tier","profiler","antialias","pixelRatio","math","clamp","devicePixelRatio","maxFrameBufferSize","Vector2","settings","process","stats","isDevelopment","devCamera","helpers","datGui","skipTransitions","guiPrecision","viewportPreviewScale","renderBufferFullscreen","graphics","baseSize","sqrt","x","y","maxSize","rendererSize","getRenderBufferSize","width","height","setRendererSize","renderer","windowWidth","windowHeight","ratio","newSize","floor","scalar","resize","setSize","domElement","style","createRenderTarget","options","defaults","minFilter","LinearFilter","magFilter","NearestFilter","format","RGBFormat","type","UnsignedByteType","stencilBuffer","WebGLRenderTarget","resetCamera","camera","zoom","angle","position","set","z","lookAt","createPerspectiveCamera","aspect","PerspectiveCamera","createOrbitControls","OrbitControls","Folder","object","key","list","this","value","id","GUIWrapper","Cls","gui","createCanvas","canvas","document","createElement","ctx","getContext","detect","device","isDesktop","toggleHide","renderTarget","depthBuffer","RGBAFormat","setAllCulled","obj","overrideCulled","wasFrustumCulled","frustumCulled","wasVisible","visible","children","forEach","child","preloadGpu","scene","cameraAspect","updateProjectionMatrix","setRenderTarget","render","Asset","config","Loader","EventEmitter","json","image","threeFBX","threeGLTF","threeTexture","ImageLoader","asset","load","Image","onload","data","emit","onerror","src","JsonLoader","req","XMLHttpRequest","onreadystatechange","readyState","status","JSON","responseText","open","send","ThreeTextureLoader","TextureLoader","texture","ThreeFBXLoader","FBXLoader","dracoLoader","DRACOLoader","setDecoderPath","preload","ThreeGLTFLoader","loader","GLTFLoader","setDRACOLoader","gltf","LOADERS","GroupLoader","manifest","loaders","push","loaded","queue","currentParallel","total","length","loadNextInQueue","parallelLoads","once","onLoaded","onError","assets","error","minParallel","maxParallel","args","on","response","group","groupId","all","find","BaseScene","preloadGpuCullScene","culled","toggleHelpers","toogleCameras","cameras","dev","main","control","controls","update","delta","dispose","disposeObjects","parent","remove","geometry","material","i","l","removeFolder","name","generateUUID","clearColor","lights","Scene","addFolder","guiOpen","light","add","Promise","resolve","reject","assetLoader","assetManager","Group","GridHelper","AxesHelper","loadAssets","createSceneHelpers","createSceneObjects","animate","TweenLite","TransitionPass","active","ShaderMaterial","uniforms","texture0","texture1","transition","resolution","vertexShader","fragmentShader","mesh","Mesh","matrixAutoUpdate","updateMatrix","onChange","listen","killTweensOf","to","then","sceneA","sceneB","renderTargetA","renderTargetB","setClearColor","fxaaEnabled","fxaaResolution","filmEnabled","filmNoiseIntensity","filmScanIntensity","filmScanCount","filmGrayscale","fragmentPass","filmFragmentPass","FinalPass","UniformsUtils","merge","time","tDiffuse","fxaaUniforms","filmUniforms","guiPass","fxaaGuiControls","filmGuiControls","EmptyScene","PostProcessing","BufferGeometry","attribute","BufferAttribute","Float32Array","setAttribute","setIndex","bigTriangle","OrthographicCamera","renderTargetC","transitionPass","finalPass","setup","setScenes","scale","currentScene","lastPass","WebGLRenderer","powerPreference","stencil","debug","checkShaderErrors","guiRendering","setPixelRatio","setScissorTest","innerWidth","innerHeight","postProcessing","gl","gpuInfo","getExtension","gpu","getParameter","UNMASKED_RENDERER_WEBGL","console","log","rendererStats","container","cssText","msDiv","appendChild","msText","innerHTML","msTexts","lastTime","Date","now","webglRenderer","assert","textContent","info","programs","memory","geometries","textures","calls","triangles","lines","points","left","top","body","PreloaderScene","spinner","opacity","animateInit","rotation","RingBufferGeometry","transparent","onComplete","AppState","props","ready","state","hooks","preTransform","postTransform","preNormal","preFragColor","postFragColor","postNormal","postFragFog","replace","shader","keys","hook","parts","split","line","functions","TouchControls","element","bindEvents","bind","listener","touchStart","onTouchStart","touchMove","onTouchMove","touchEnd","onTouchEnd","hover","onMouseOver","onMouseOut","setPointers","event","pointers","touches","touchesLength","pointer","pageX","pageY","normalX","normalY","isDown","onMouseMove","InteractiveObject","touchControls","setCoords","intersected","raycast","intersects","hovering","fired","hoverOver","mouseMove","hoverOut","coords","raycaster","setFromCamera","intersectObject","Raycaster","Sphere","onStart","scaleMesh","onHover","over","onEnd","divisions","SphereBufferGeometry","MeshLambertMaterial","compiled","onBeforeCompile","materialModifier","shaderConfig","interactiveObject","Ambient","color","setHex","intensity","AmbientLight","guiParent","addColor","Directional","helper","DirectionalLight","DirectionalLightHelper","step","Background","color0","color1","Color","strength","powStrength","side","BackSide","LandingScene","sphere","animateIn","animateOut","background","helperGeometry","helperMaterial","MeshBasicMaterial","helperLineMaterialOrigin","LineBasicMaterial","helperLineMaterialLookat","CameraDolly","helperOptions","toggleVisibility","toggleControls","createSmoothSpline","positions","totalPoints","curve","CatmullRomCurve3","getPoints","getCameraDataByTime","origin","curves","getPointAt","lookat","updateSplines","steps","addControl","index","point","copy","TransformControls","enabled","addEventListener","onTransformChanged","attach","curvePoints","createLine","vertices","Geometry","Line","lineMeshes","rebuild","removeLines","export","prompt","removeEventListener","onTransformDragChanged","controlsVisible","pointsVisible","linesVisible","CameraDollyManager","onTrackChange","setTransition","dollies","dollyId","dollyIds","tracksGui","cameraMain","cameraDev","Dolly","duration","ease","Power1","easeOut","TweenMax","onUpdate","stop","CameraTransitionsScene","play","animateCamera","cameraDollyManager","CameraHelper","tracks","trackIds","trackIndex","addTransition","Screenshot","save","toBlob","blob","saveAs","capture","clearRect","finalPassWidth","finalPassHeight","setViewport","setScissor","screenshotRender","readRenderTargetPixels","pixelBuffer","imageData","ctxFlipped","putImageData","drawImage","canvasFlipped","restore","Uint8Array","createImageData","WebGLApp","captureScreenshot","screenshot","setState","equals","prevState","clone","onStateChanged","setScene","sceneId","viewport","renderScene","usePostProcessing","w","isRendering","cancelAnimationFrame","rafId","requestAnimationFrame","clock","getDelta","Clock","scenes","CameraTransitionScene","sceneIds","Vector4","guiSettings","catch","previousScene","nextScene","App","windowSize","onReady","onResize","webglApp","delayedCall","prevProps","className","ref","node","React","PureComponent","root","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.16cce0b2.chunk.js","sourcesContent":["import { Math as Math3, Vector3 } from 'three';\n\n// Math constants that are regularly used\nexport const TWO_PI = Math.PI * 2;\nexport const PI = Math.PI;\nexport const HALF_PI = Math.PI / 2;\nexport const QUARTER_PI = Math.PI / 4;\nexport const VECTOR_ZERO = new Vector3();\nexport const VECTOR_ONE = new Vector3(1, 1, 1);\nexport const VECTOR_UP = new Vector3(0, 1, 0);\n\nexport default Math3;\n","const queryString = require('query-string');\n\n/**\n * Get a query parameter\n *\n * @export\n * @param {String} prop\n * @returns\n */\nexport function getQueryFromParams(prop: string): mixed {\n  const params = queryString.parse(window.location.search);\n  return params[prop] !== undefined ? params[prop] : false;\n}\n\n/**\n * Set a query parmeter\n *\n * @export\n * @param {String} query\n * @param {String} val\n * @param {boolean} [reload=false]\n * @returns\n */\nexport function setQuery(query: string, val: string, reload: boolean = false) {\n  const queries = queryString.parse(window.location.search);\n  const newQueries = Object.assign({}, queries, {\n    [query]: val\n  });\n  const stringified = queryString.stringify(newQueries);\n\n  if (reload) {\n    window.location.href = `${window.location.pathname}?${stringified}`;\n    return;\n  }\n  const url = `${window.location.protocol}//${window.location.host}${window.location.pathname}?${stringified}`;\n  window.history.pushState({ path: url }, '', url);\n}\n","import { getGPUTier } from 'detect-gpu';\nimport { Vector2 } from 'three';\nimport math from '../utils/math';\nimport { getQueryFromParams } from '../utils/query-params';\n\n// Graphics mode constants\nexport const GRAPHICS_HIGH = 'high';\nexport const GRAPHICS_NORMAL = 'normal';\nexport const GRAPHICS_MODES = [GRAPHICS_HIGH, GRAPHICS_NORMAL];\n\nlet GRAPHICS_MODE = GRAPHICS_NORMAL;\n\n/**\n * Get the current graphics mode\n *\n * @export\n * @returns\n */\nexport function getGraphicsMode(): string {\n  return GRAPHICS_MODE;\n}\n\nconst gpuTier = getGPUTier();\n\nexport function profiler(): string {\n  switch (gpuTier.tier) {\n    case 'GPU_DESKTOP_TIER_3':\n    case 'GPU_DESKTOP_TIER_2':\n    case 'GPU_MOBILE_TIER_3':\n      return GRAPHICS_HIGH;\n    case 'GPU_DESKTOP_TIER_1':\n    default:\n      return GRAPHICS_NORMAL;\n  }\n}\n\n// If the graphics query parameter is set, use it over the current gpu tier\nconst graphicsMode = getQueryFromParams('graphics');\nif (GRAPHICS_MODES.includes(graphicsMode) && typeof graphicsMode === 'string') {\n  GRAPHICS_MODE = graphicsMode;\n} else {\n  GRAPHICS_MODE = profiler();\n}\n\nexport function getTier(): string {\n  return gpuTier.tier;\n}\n\n// Graphics settings for the renderer\nexport default {\n  [GRAPHICS_HIGH]: {\n    antialias: false, // Enable antialias if you're not using post processing\n    pixelRatio: math.clamp(window.devicePixelRatio, 1, 2),\n    maxFrameBufferSize: new Vector2(1280, 720)\n  },\n  [GRAPHICS_NORMAL]: {\n    antialias: false,\n    pixelRatio: 1,\n    maxFrameBufferSize: new Vector2(1280, 720)\n  }\n};\n","import { getQueryFromParams } from './utils/query-params';\n\nconst settings = {};\n\n// Enviroment setting\nsettings.isDevelopment = process.env.NODE_ENV !== 'production';\n\n// Show fps stats\nsettings.stats = getQueryFromParams('stats') === null && settings.isDevelopment;\n\n// Enable dev camera rendering\nsettings.devCamera = getQueryFromParams('devCamera') === 'true' && settings.isDevelopment;\n\n// Enable helpers\nsettings.helpers = getQueryFromParams('helpers') === 'true' && settings.isDevelopment;\n\n// Enable dat gui\nsettings.datGui = getQueryFromParams('gui') === null && settings.isDevelopment;\n\n// Skips all transitions\nsettings.skipTransitions = getQueryFromParams('skipTransitions') === null && settings.isDevelopment;\n\n// GUI Number precision\nsettings.guiPrecision = 0.001;\n\n// Viewport preview scale (when using devCamera)\nsettings.viewportPreviewScale = 0.25;\n\n// Unlock full render size (should be false for prod)\nsettings.renderBufferFullscreen = false;\n\nexport default settings;\n","import { Vector2, WebGLRenderer } from 'three';\nimport graphics, { getGraphicsMode } from './graphics';\nimport settings from '../settings';\n\nconst { maxFrameBufferSize, pixelRatio } = graphics[getGraphicsMode()];\n\nconst baseSize = Math.sqrt(maxFrameBufferSize.x * maxFrameBufferSize.y);\nconst maxSize = baseSize * baseSize;\n\nexport const rendererSize = new Vector2();\n\nexport function getRenderBufferSize(): { width: number, height: number } {\n  return {\n    width: rendererSize.x * pixelRatio,\n    height: rendererSize.y * pixelRatio\n  };\n}\n\nfunction resize(windowWidth: number, windowHeight: number): { width: number, height: number } {\n  let width = windowWidth;\n  let height = windowHeight;\n  if (windowWidth * windowHeight > maxSize) {\n    const ratio = height / width;\n    width = baseSize;\n    height = Math.floor(baseSize * ratio);\n    let newSize = width * height;\n    const scalar = Math.sqrt(maxSize / newSize);\n    width = Math.floor(width * scalar);\n    height = Math.floor(height * scalar);\n  }\n  return {\n    width,\n    height\n  };\n}\n\nexport function setRendererSize(renderer: WebGLRenderer, windowWidth: number, windowHeight: number) {\n  let { width, height } = resize(windowWidth, windowHeight);\n  if (settings.renderBufferFullscreen) {\n    width = windowWidth;\n    height = windowHeight;\n  }\n  rendererSize.x = width;\n  rendererSize.y = height;\n  renderer.setSize(width, height);\n  renderer.domElement.style.width = `${windowWidth}px`;\n  renderer.domElement.style.height = `${windowHeight}px`;\n}\n","import { WebGLRenderTarget, LinearFilter, NearestFilter, RGBFormat, UnsignedByteType } from 'three';\n\nexport function createRenderTarget(width: number = 1024, height: number = 1024, options: Object = {}) {\n  const defaults = {\n    minFilter: LinearFilter,\n    magFilter: NearestFilter,\n    format: RGBFormat,\n    type: UnsignedByteType,\n    stencilBuffer: false\n  };\n  return new WebGLRenderTarget(width, height, Object.assign({}, defaults, options));\n}\n","export const vertexShader = `\n  void main() {\n    gl_Position = vec4(position, 1.0);\n  }\n`;\n\nexport const fragmentShader = `\n  uniform sampler2D texture0;\n  uniform sampler2D texture1;\n  uniform float transition;\n  uniform vec2 resolution;\n  void main() {\n    vec2 uv = gl_FragCoord.xy / resolution;\n    vec4 texel0 = texture2D(texture0, uv);\n    vec4 texel1 = texture2D(texture1, uv);\n    gl_FragColor = mix(texel0, texel1, transition);\n  }\n`;\n","import { PerspectiveCamera, Vector3 } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport renderer from '../rendering/renderer';\nimport { VECTOR_ZERO, VECTOR_ONE } from '../utils/math';\n\n// Perspective camera defaults\nexport const FOV = 65;\nconst near = 0.1;\nconst far = 1000;\n\n/**\n * Reset the camera position\n *\n * @export\n * @param {PerspectiveCamera} camera\n * @param {number} [zoom=1]\n * @param {Vector3} [angle=VECTOR_ONE]\n */\nexport function resetCamera(camera: PerspectiveCamera, zoom: number = 1, angle: Vector3 = VECTOR_ONE) {\n  camera.position.set(angle.x * zoom, angle.y * zoom, angle.z * zoom);\n  camera.lookAt(VECTOR_ZERO);\n}\n\n/**\n * Utility for creating a perspective camera\n *\n * @export\n * @returns\n */\nexport function createPerspectiveCamera(aspect: number): PerspectiveCamera {\n  return new PerspectiveCamera(FOV, aspect, near, far);\n}\n\n/**\n * Utility for creating orbit controls\n *\n * @export\n * @param {PerspectiveCamera} camera\n * @returns\n */\nexport function createOrbitControls(camera: PerspectiveCamera): OrbitControls {\n  return new OrbitControls(camera, renderer.domElement);\n}\n","import detect from '@jam3/detect';\nimport settings from '../settings';\n\n/**\n * @class Folder\n */\nclass Folder {\n  add(object: any, key: string, list?: mixed[]) {\n    return this;\n  }\n  listen() {\n    return this;\n  }\n  name() {\n    return this;\n  }\n  open() {\n    return this;\n  }\n  close() {\n    return this;\n  }\n  onChange(value: mixed) {\n    return this;\n  }\n  addFolder(id: string) {\n    return this;\n  }\n  addColor() {\n    return this;\n  }\n  removeFolder(id: string) {\n    return this;\n  }\n  remove() {\n    return this;\n  }\n  step() {\n    return this;\n  }\n}\n\n/**\n * @class GUIWrapper\n */\nclass GUIWrapper {\n  static toggleHide() {\n    return this;\n  }\n  add(object: any, key: string, list?: mixed[]) {\n    return this;\n  }\n  addFolder(id: string) {\n    return new Folder();\n  }\n  removeFolder(id: string) {\n    return this;\n  }\n  addColor() {\n    return this;\n  }\n  listen() {\n    return this;\n  }\n  name() {\n    return this;\n  }\n  close() {\n    return this;\n  }\n  step() {\n    return this;\n  }\n  onChange(value: mixed) {\n    return this;\n  }\n  setValue() {\n    return this;\n  }\n  remove() {\n    return this;\n  }\n  open() {\n    return this;\n  }\n}\n\nlet Cls = GUIWrapper;\n\nif (process.env.NODE_ENV !== 'production' && settings.datGui) {\n  Cls = require('dat.gui').GUI;\n\n  Cls.prototype.removeFolder = function(name) {\n    var folder = this.__folders[name];\n    if (!folder) {\n      return;\n    }\n    folder.close();\n    this.__ul.removeChild(folder.domElement.parentNode);\n    delete this.__folders[name];\n    this.onResize();\n  };\n}\n\nexport const gui = new Cls();\nexport { GUIWrapper };\n\nif (!detect.device.isDesktop) {\n  Cls.toggleHide();\n}\n","/**\n * Create a canvas and 2d context\n *\n * @export\n * @param {Number} width\n * @param {Number} height\n * @returns\n */\nexport default function createCanvas(width: number, height: number) {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext('2d');\n  return {\n    ctx,\n    canvas\n  };\n}\n","import { Scene, PerspectiveCamera, RGBAFormat, Object3D } from 'three';\nimport renderer from './renderer';\nimport { createRenderTarget } from './render-target';\nimport RenderTargetHelper from '../utils/render-target-helper';\n\nconst RENDER_TARGET_SIZE = 128;\nconst RENDER_TARGET_DEBUG = false;\n\nconst renderTarget = createRenderTarget(RENDER_TARGET_SIZE, RENDER_TARGET_SIZE, {\n  depthBuffer: false,\n  format: RGBAFormat\n});\n\nlet renderTargetHelper;\nif (RENDER_TARGET_DEBUG) {\n  renderTargetHelper = new RenderTargetHelper(renderTarget);\n}\n\n// https://medium.com/@hellomondaycom/how-we-built-the-google-cloud-infrastructure-webgl-experience-dec3ce7cd209\nfunction setAllCulled(obj: Object3D, overrideCulled: boolean) {\n  if (overrideCulled === false) {\n    obj.wasFrustumCulled = obj.frustumCulled;\n    obj.wasVisible = obj.visible;\n    obj.visible = true;\n    obj.frustumCulled = false;\n  } else {\n    obj.visible = obj.wasVisible;\n    obj.frustumCulled = obj.wasFrustumCulled;\n  }\n  obj.children.forEach(child => setAllCulled(child, overrideCulled));\n}\n\nexport default function preloadGpu(scene: Scene, camera: PerspectiveCamera) {\n  const cameraAspect = camera.aspect;\n  camera.aspect = 1;\n  camera.updateProjectionMatrix();\n  setAllCulled(scene, false);\n  renderer.setRenderTarget(renderTarget);\n  renderer.render(scene, camera);\n  if (RENDER_TARGET_DEBUG) renderTargetHelper.update();\n  renderer.setRenderTarget(null);\n  camera.aspect = cameraAspect;\n  camera.updateProjectionMatrix();\n  setAllCulled(scene, true);\n}\n","/**\n *\n *\n * @interface AssetConfig\n */\nexport interface AssetConfig {\n  id: string;\n  src: string;\n  type: string;\n  args?: Object;\n  data?: mixed;\n}\n\n/**\n *\n *\n * @export\n * @class Asset\n */\nexport default class Asset {\n  id: string;\n  src: string;\n  type: string;\n  args: Object;\n  data: mixed;\n  constructor(config: AssetConfig) {\n    Object.assign(this, config);\n  }\n}\n","import EventEmitter from 'eventemitter3';\nimport Asset from '../asset';\n\n/**\n * Base loader\n *\n * @class Loader\n * @extends {EventEmitter}\n */\nclass Loader extends EventEmitter {\n  asset: Asset;\n  static json: string = 'json';\n  static image: string = 'image';\n  static threeFBX: string = 'fbx';\n  static threeGLTF: string = 'gltf';\n  static threeTexture: string = 'texture';\n}\n\nexport default Loader;\n","import Loader from './loader';\nimport Asset from '../asset';\n\n/**\n * Image Loader\n *\n * @export\n * @class ImageLoader\n * @extends {Loader}\n */\nexport default class ImageLoader extends Loader {\n  constructor(asset: Asset) {\n    super();\n    this.asset = asset;\n  }\n\n  load = () => {\n    const image = new Image();\n\n    image.onload = () => {\n      this.asset.data = image;\n      this.emit('loaded', this.asset);\n    };\n\n    image.onerror = () => {\n      this.emit('error', `Failed to load ${this.asset.src}`);\n    };\n\n    image.src = this.asset.src;\n  };\n}\n","import Loader from './loader';\nimport Asset from '../asset';\n\n/**\n * Json loader\n *\n * @export\n * @class JsonLoader\n * @extends {Loader}\n */\nexport default class JsonLoader extends Loader {\n  constructor(asset: Asset) {\n    super();\n    this.asset = asset;\n  }\n\n  load = () => {\n    const req = new XMLHttpRequest();\n\n    req.onreadystatechange = () => {\n      if (req.readyState !== 4) return;\n      if (req.readyState === 4 && req.status === 200) {\n        this.asset.data = JSON.parse(req.responseText);\n        this.emit('loaded', this.asset);\n      } else {\n        this.emit('error', `Failed to load ${this.asset.src}`);\n      }\n    };\n\n    req.open('GET', this.asset.src, true);\n    req.send();\n  };\n}\n","import { TextureLoader, Texture } from 'three';\nimport Loader from './loader';\nimport Asset from '../asset';\n\n/**\n * Threejs texture loader\n *\n * @export\n * @class ThreeTextureLoader\n * @extends {Loader}\n */\nexport default class ThreeTextureLoader extends Loader {\n  constructor(asset: Asset) {\n    super();\n    this.asset = asset;\n  }\n\n  load = () => {\n    const loader = new TextureLoader();\n\n    const onLoaded = (texture: Texture) => {\n      this.asset.data = texture;\n      this.emit('loaded', this.asset);\n    };\n\n    const onError = () => {\n      this.emit('error', `Failed to load ${this.asset.src}`);\n    };\n\n    loader.load(this.asset.src, onLoaded, null, onError);\n  };\n}\n","import { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\nimport Loader from './loader';\nimport Asset from '../asset';\n\n/**\n * Threejs FBX Loader\n *\n * @export\n * @class ThreeFBXLoader\n * @extends {Loader}\n */\nexport default class ThreeFBXLoader extends Loader {\n  constructor(asset: Asset) {\n    super();\n    this.asset = asset;\n  }\n\n  load = () => {\n    const loader = new FBXLoader();\n\n    const onLoaded = (data: Object) => {\n      this.asset.data = data;\n      this.emit('loaded', this.asset);\n    };\n\n    const onError = () => {\n      this.emit('error', `Failed to load ${this.asset.src}`);\n    };\n\n    loader.load(this.asset.src, onLoaded, null, onError);\n  };\n}\n","import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\nimport Loader from './loader';\nimport Asset from '../asset';\n\n// Use the draco loader for gltf if the glb file is compressed with draco\nconst dracoLoader = new DRACOLoader();\ndracoLoader.setDecoderPath('/assets/lib/draco/gltf/');\ndracoLoader.preload();\n\n/**\n * Threejs GLTF Loader\n *\n * @export\n * @class ThreeGLTFLoader\n * @extends {Loader}\n */\nexport default class ThreeGLTFLoader extends Loader {\n  constructor(asset: Asset) {\n    super();\n    this.asset = asset;\n  }\n\n  load = () => {\n    const loader = new GLTFLoader();\n    loader.setDRACOLoader(dracoLoader);\n\n    const onLoaded = (gltf: Object) => {\n      this.asset.data = gltf;\n      this.emit('loaded', this.asset);\n    };\n\n    const onError = () => {\n      this.emit('error', `Failed to load ${this.asset.src}`);\n    };\n\n    loader.load(this.asset.src, onLoaded, null, onError);\n  };\n}\n","import EventEmitter from 'eventemitter3';\nimport detect from '@jam3/detect';\nimport Asset from '../asset';\nimport Loader from './loader';\nimport ImageLoader from './image-loader';\nimport JsonLoader from './json-loader';\nimport ThreeTextureLoader from './three-texture-loader';\nimport ThreeFBXLoader from './three-fbx-loader';\nimport ThreeGLTFLoader from './three-gltf-loader';\n\nconst LOADERS = {\n  [Loader.image]: ImageLoader,\n  [Loader.json]: JsonLoader,\n  [Loader.threeTexture]: ThreeTextureLoader,\n  [Loader.threeFBX]: ThreeFBXLoader,\n  [Loader.threeGLTF]: ThreeGLTFLoader\n};\n\n/**\n * Group loader loads an array of assets based on their asset types\n *\n * @export\n * @class GroupLoader\n * @extends {EventEmitter}\n */\nexport default class GroupLoader extends EventEmitter {\n  constructor(options: Object = {}) {\n    super();\n    this.id = options.id || '';\n    this.minParallel = options.minParallel || 5;\n    this.maxParallel = options.maxParallel || 10;\n    // How many parallel loads at once\n    this.parallelLoads = detect.device.isDesktop ? this.maxParallel : this.minParallel;\n  }\n\n  load = (manifest: Asset[]) => {\n    this.loaders = [];\n\n    manifest.forEach(asset => {\n      if (LOADERS[asset.type] !== undefined) {\n        this.loaders.push(new LOADERS[asset.type](asset));\n      }\n    });\n\n    this.loaded = 0;\n    this.queue = 0;\n    this.currentParallel = 0;\n    this.total = this.loaders.length;\n\n    if (this.total === 0) {\n      this.emit('loaded', manifest);\n    } else {\n      this.loadNextInQueue();\n    }\n  };\n\n  /**\n   * Load the next in queue\n   *\n   * @memberof GroupLoader\n   */\n  loadNextInQueue = () => {\n    if (this.queue < this.total) {\n      if (this.currentParallel < this.parallelLoads) {\n        const loader = this.loaders[this.queue];\n        this.queue += 1;\n        this.currentParallel += 1;\n        loader.once('loaded', this.onLoaded);\n        loader.once('error', this.onError);\n        loader.load();\n        this.loadNextInQueue();\n      }\n    }\n  };\n\n  /**\n   * Loaded handler\n   *\n   * @memberof GroupLoader\n   */\n  onLoaded = () => {\n    this.loaded += 1;\n    // console.log(`${this.id} loaded`, this.loaded, '/', this.total);\n    this.emit('progress', this.loaded / this.total);\n    if (this.loaded === this.total) {\n      const assets = [];\n      this.loaders.forEach((loader: Loader) => {\n        assets.push(loader.asset);\n      });\n      this.emit('loaded', assets);\n    } else {\n      this.currentParallel -= 1;\n      this.loadNextInQueue();\n    }\n  };\n\n  /**\n   * Error handler\n   *\n   * @memberof GroupLoader\n   */\n  onError = (error: string) => {\n    this.emit('error', error);\n  };\n}\n","import EventEmitter from 'eventemitter3';\nimport Asset from './asset';\nimport GroupLoader from './loaders/group-loader';\n\n/**\n * Assetloader configures an instance of GroupLoader\n * and should be used for loading any asset groups for the asset manager\n *\n * @class AssetLoader\n * @extends {EventEmitter}\n */\nclass AssetLoader extends EventEmitter {\n  load = (id: string, assets: Asset[]) => {\n    const loader = new GroupLoader({ id });\n    assets.forEach(asset => {\n      if (asset.args === undefined) asset.args = {};\n    });\n\n    loader.on('progress', response => {\n      this.emit('progress', response);\n    });\n\n    loader.once('loaded', response => {\n      this.emit('loaded', response);\n    });\n\n    loader.once('error', error => {\n      this.emit('error', error);\n    });\n\n    loader.load(assets);\n  };\n}\n\nexport default new AssetLoader();\n","import Asset from './asset';\n\n/**\n * Asset manager's purpose is to store loaded assets by the AssetLoader\n * Assets can be retrived by using the get() function\n *\n * @class AssetManager\n */\nclass AssetManager {\n  assets: Object;\n\n  constructor() {\n    this.assets = {};\n  }\n\n  /**\n   * Add an asset group\n   *\n   * @param {String} group\n   * @param {Asset[]} assets\n   * @memberof AssetManager\n   */\n  add(group: String, assets: Asset[]) {\n    this.assets[group] = this.assets[group] || [];\n    this.assets[group].push(...assets);\n  }\n\n  /**\n   * Retrieve an asset by id\n   *\n   * @param {String} groupId\n   * @param {String} id\n   * @param {Boolean} [all=false]\n   * @returns\n   * @memberof AssetManager\n   */\n  get(groupId: string, id: string, all: boolean = false): boolean | Asset | mixed {\n    // console.log('groupId', groupId, 'id', id);\n    const asset = this.find(this.assets[groupId], id);\n    if (asset && asset instanceof Asset) {\n      return all ? asset : asset.data;\n    }\n    return false;\n  }\n\n  /**\n   * Find an asset by id\n   *\n   * @param {Asset[]} assets\n   * @param {String} id\n   * @returns\n   * @memberof AssetManager\n   */\n  find(assets: Asset[], id: string): boolean | Asset {\n    return assets.find(asset => asset.id === id) || false;\n  }\n}\n\nexport default new AssetManager();\n","// @flow\n\nimport EventEmitter from 'eventemitter3';\nimport { Scene, Group, GridHelper, AxesHelper } from 'three';\nimport { createPerspectiveCamera, createOrbitControls, resetCamera } from '../../cameras/cameras';\nimport { gui, GUIWrapper } from '../../utils/gui';\nimport Math3 from '../../utils/math';\nimport settings from '../../settings';\nimport { rendererSize } from '../../rendering/resize';\nimport preloadGpu from '../../rendering/preload-gpu';\nimport assetLoader from '../../loading/asset-loader';\nimport assetManager from '../../loading/asset-manager';\nimport Asset from '../../loading/asset';\nimport disposeObjects from '../../utils/dispose-objects';\n\n/**\n * A base scene for other scenes to inherit\n * It's main purpose is to abtract a lot of boilerplate code and serves\n * as a pattern for working with multiple scenes in a project\n *\n * @export\n * @class BaseScene\n * @extends {EventEmitter}\n */\nexport default class BaseScene extends EventEmitter {\n  constructor(options: Object) {\n    super();\n    // Unique scene id\n    this.id = options.id || Math3.generateUUID();\n    // Clear color for the scene\n    this.clearColor = options.clearColor || 0x000000;\n    // Array of lights to add to the scene\n    this.lights = options.lights || [];\n    // Assets manifest\n    this.assets = options.assets || [];\n    // The scene for objects\n    this.scene = new Scene();\n\n    // The cameras for rendering\n    this.cameras = {\n      dev: createPerspectiveCamera(rendererSize.x / rendererSize.y),\n      main: createPerspectiveCamera(rendererSize.x / rendererSize.y)\n    };\n\n    // Active rendering camera\n    this.camera = settings.devCamera ? this.cameras.dev : this.cameras.main;\n\n    // Set the initial camera positions\n    resetCamera(this.cameras.dev, 5);\n    resetCamera(this.cameras.main, 5);\n\n    // Orbit controls\n    this.controls = {};\n\n    // Optionally create orbit controls for main camera\n    if (options.controls) {\n      this.controls.dev = createOrbitControls(this.cameras.dev);\n      this.controls.main = createOrbitControls(this.cameras.main);\n    }\n\n    // Active camera control\n    this.control = settings.devCamera ? this.controls.dev : this.controls.main;\n\n    // Optionally create gui controls\n    if (options.gui) {\n      this.gui = gui.addFolder(`${this.id} scene`);\n      if (options.guiOpen) this.gui.open();\n    } else {\n      this.gui = new GUIWrapper();\n    }\n\n    // Add any lights to the scene\n    this.lights.forEach(light => {\n      this.scene.add(light.light);\n      light.gui(this.gui);\n    });\n  }\n\n  /**\n   *\n   *\n   * @memberof BaseScene\n   */\n  async loadAssets() {\n    await new Promise((resolve, reject) => {\n      try {\n        if (this.assets.length > 0) {\n          assetLoader.once('loaded', (response: Asset[]) => {\n            if (response.length > 0) assetManager.add(this.id, response);\n            resolve();\n          });\n          assetLoader.once('error', error => {\n            reject(error);\n          });\n          assetLoader.load(this.id, this.assets);\n        } else {\n          resolve();\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Use this function to setup any helpers for the scene\n   *\n   * @memberof BaseScene\n   */\n  async createSceneHelpers() {\n    await new Promise((resolve: Function, reject: Function) => {\n      try {\n        // Add helpers\n        this.helpers = new Group();\n        this.helpers.add(new GridHelper(10, 10), new AxesHelper());\n        this.helpers.visible = settings.helpers;\n        this.scene.add(this.helpers);\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Use this function to setup any 3d objects once overridden\n   *\n   * @memberof BaseScene\n   */\n  async createSceneObjects() {\n    await new Promise((resolve, reject) => {\n      try {\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Use this function to show any materials or objects that can't be seen\n   * using the visible flag inside preloadGpu\n   * An example of this could be a materials alpha is set to 0\n   *\n   * @memberof BaseScene\n   */\n  preloadGpuCullScene = (culled: boolean) => {};\n\n  /**\n   * Setup is used to create any 3D objects\n   * and pre-upload them to the GPU to ensure smooth transitions when rendering\n   *\n   * @memberof BaseScene\n   */\n  async setup() {\n    await this.loadAssets();\n    await this.createSceneHelpers();\n    await this.createSceneObjects();\n    this.preloadGpuCullScene(true);\n    preloadGpu(this.scene, this.camera);\n    this.preloadGpuCullScene(false);\n  }\n\n  /**\n   * Toggle helpers on and off\n   *\n   * @memberof BaseScene\n   */\n  toggleHelpers = (visible: boolean = true) => {\n    this.helpers.visible = visible;\n  };\n\n  /**\n   * Toggle helpers on and off\n   *\n   * @memberof BaseScene\n   */\n  toogleCameras = (devCamera: boolean = true) => {\n    this.camera = devCamera ? this.cameras.dev : this.cameras.main;\n    this.control = devCamera ? this.controls.dev : this.controls.main;\n  };\n\n  /**\n   * Resize the camera's projection matrix\n   *\n   * @memberof BaseScene\n   */\n  resize = (width: number, height: number) => {\n    this.cameras.dev.aspect = width / height;\n    this.cameras.dev.updateProjectionMatrix();\n    this.cameras.main.aspect = width / height;\n    this.cameras.main.updateProjectionMatrix();\n  };\n\n  /**\n   * Provide a promise after the scene has animated in\n   *\n   * @memberof BaseScene\n   */\n  async animateIn() {\n    await new Promise((resolve, reject) => {\n      try {\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Provide a promise after the scene has animated out\n   *\n   * @memberof BaseScene\n   */\n  async animateOut() {\n    await new Promise((resolve, reject) => {\n      try {\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Update loop for animation, override this function\n   *\n   * @memberof BaseScene\n   */\n  update = (delta: number) => {};\n\n  /**\n   * Clear up scene objects\n   *\n   * @memberof BaseScene\n   */\n  dispose = () => {\n    disposeObjects(this.scene, null);\n    if (this.gui) gui.removeFolder(this.gui.name);\n  };\n}\n","import { Object3D, Scene } from 'three';\n\n/**\n * Recursively dispose threejs objects\n *\n * @export\n * @param {Object3D} object\n * @param {(Scene | Object3D)} parent\n * @returns\n */\nexport default function disposeObjects(object: Scene | Object3D, parent: Scene | Object3D) {\n  if (object === null || object === undefined) return;\n  if (parent) parent.remove(object);\n  if (object.dispose) {\n    object.dispose();\n  }\n  if (object.geometry) {\n    object.geometry.dispose();\n  }\n  if (object.material) {\n    object.material.dispose();\n  }\n  if (object.children) {\n    let i = 0;\n    const l = object.children.length;\n    while (i < l) {\n      disposeObjects(object.children[0], object);\n      i++;\n    }\n  }\n  if (object.type === 'Scene') object.dispose();\n  object = null;\n}\n","import { Scene, Mesh, ShaderMaterial, Vector2, BufferGeometry, OrthographicCamera, WebGLRenderTarget } from 'three';\nimport { TweenLite } from 'gsap';\nimport { GUI } from 'dat.gui';\nimport { vertexShader, fragmentShader } from './shader.glsl';\nimport { getRenderBufferSize } from '../../../resize';\nimport renderer from '../../../renderer';\nimport BaseScene from '../../../../scenes/base/base-scene';\nimport settings from '../../../../settings';\nconst animate = require('gsap-promisify')(Promise, TweenLite);\n\n/**\n * Transition pass handles transitioning between two scenes\n *\n * @export\n * @class TransitionPass\n */\nexport default class TransitionPass {\n  gui: GUI;\n  scene: Scene;\n  camera: OrthographicCamera;\n  active: boolean;\n  mesh: Mesh;\n\n  constructor(gui: GUI, geometry: BufferGeometry, camera: OrthographicCamera) {\n    // Create gui\n    this.gui = gui.addFolder('transition pass');\n    this.gui.open();\n    // Create scene\n    this.scene = new Scene();\n    this.camera = camera;\n    this.active = false;\n    const { width, height } = getRenderBufferSize();\n    // Setup shader\n    const material = new ShaderMaterial({\n      uniforms: {\n        texture0: {\n          value: null\n        },\n        texture1: {\n          value: null\n        },\n        transition: {\n          value: 0\n        },\n        resolution: {\n          value: new Vector2(width, height)\n        }\n      },\n      vertexShader,\n      fragmentShader\n    });\n\n    // Create the mesh and turn off matrixAutoUpdate\n    this.mesh = new Mesh(geometry, material);\n    this.mesh.matrixAutoUpdate = false;\n    this.mesh.updateMatrix();\n    this.scene.add(this.mesh);\n\n    // Setup gui\n    this.gui\n      .add(this.mesh.material.uniforms.transition, 'value', 0, 1)\n      .onChange((value: number) => {\n        this.active = value !== 0 && value !== 1;\n      })\n      .name('transition')\n      .listen();\n  }\n\n  /**\n   * Transition activates this pass and blends from sceneA to sceneB\n   *\n   * @memberof TransitionPass\n   */\n  async transition() {\n    if (settings.skipTransitions) {\n      this.mesh.material.uniforms.transition.value = 1;\n    } else {\n      this.mesh.material.uniforms.transition.value = 0;\n      this.active = true;\n      TweenLite.killTweensOf(this.mesh.material.uniforms.transition);\n      await animate\n        .to(this.mesh.material.uniforms.transition, 1, {\n          value: 1\n        })\n        .then(() => {\n          this.active = false;\n        });\n    }\n  }\n\n  /**\n   * Resize handler\n   *\n   * @param {Number} width\n   * @param {Number} height\n   * @memberof TransitionPass\n   */\n  resize(width: number, height: number) {\n    this.mesh.material.uniforms.resolution.value.x = width;\n    this.mesh.material.uniforms.resolution.value.y = height;\n  }\n\n  /**\n   * Render both scenes to renderTargetA and renderTargetB\n   *\n   * @param {BaseScene} sceneA\n   * @param {BaseScene} sceneB\n   * @param {WebGLRenderTarget} renderTargetA\n   * @param {WebGLRenderTarget} renderTargetB\n   * @param {Number} delta\n   * @memberof TransitionPass\n   */\n  render(\n    sceneA: BaseScene,\n    sceneB: BaseScene,\n    renderTargetA: WebGLRenderTarget,\n    renderTargetB: WebGLRenderTarget,\n    delta: number\n  ) {\n    sceneA.update(delta);\n    sceneB.update(delta);\n    renderer.setClearColor(sceneA.clearColor);\n    renderer.setRenderTarget(renderTargetA);\n    renderer.render(sceneA.scene, sceneA.camera);\n    renderer.setClearColor(sceneB.clearColor);\n    renderer.setRenderTarget(renderTargetB);\n    renderer.render(sceneB.scene, sceneB.camera);\n    this.mesh.material.uniforms.texture0.value = renderTargetA.texture;\n    this.mesh.material.uniforms.texture1.value = renderTargetB.texture;\n    renderer.setRenderTarget(null);\n  }\n}\n","import { Vector2, Material } from 'three';\nimport { GUI } from 'dat.gui';\n\nexport const uniforms = {\n  fxaaEnabled: { value: 1 },\n\tfxaaResolution: { value: new Vector2( 1 / 1024, 1 / 512 ) }\n};\n\nexport const fragmentUniforms = `\n  precision highp float;\n  uniform bool fxaaEnabled;\n  uniform vec2 fxaaResolution;\n  varying vec2 vUv;\n`;\n\nexport const fragmentPass = `\n  // FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\n\n  //----------------------------------------------------------------------------------\n  // File:        es3-kepler/FXAA/assets/shaders/FXAA_DefaultES.frag\n  // SDK Version: v3.00\n  // Email:       gameworks@nvidia.com\n  // Site:        http://developer.nvidia.com/\n  //\n  // Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\n  //\n  // Redistribution and use in source and binary forms, with or without\n  // modification, are permitted provided that the following conditions\n  // are met:\n  //  * Redistributions of source code must retain the above copyright\n  //    notice, this list of conditions and the following disclaimer.\n  //  * Redistributions in binary form must reproduce the above copyright\n  //    notice, this list of conditions and the following disclaimer in the\n  //    documentation and/or other materials provided with the distribution.\n  //  * Neither the name of NVIDIA CORPORATION nor the names of its\n  //    contributors may be used to endorse or promote products derived\n  //    from this software without specific prior written permission.\n  //\n  // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS 'AS IS' AND ANY\n  // EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n  // PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n  // CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n  // EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n  // PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n  // PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n  // OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  //\n  //----------------------------------------------------------------------------------\n\n  #define FXAA_PC 1\n  #define FXAA_GLSL_100 1\n  #define FXAA_QUALITY_PRESET 12\n\n  #define FXAA_GREEN_AS_LUMA 1\n\n  /*--------------------------------------------------------------------------*/\n  #ifndef FXAA_PC_CONSOLE\n      //\n      // The console algorithm for PC is included\n      // for developers targeting really low spec machines.\n      // Likely better to just run FXAA_PC, and use a really low preset.\n      //\n      #define FXAA_PC_CONSOLE 0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #ifndef FXAA_GLSL_120\n      #define FXAA_GLSL_120 0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #ifndef FXAA_GLSL_130\n      #define FXAA_GLSL_130 0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #ifndef FXAA_HLSL_3\n      #define FXAA_HLSL_3 0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #ifndef FXAA_HLSL_4\n      #define FXAA_HLSL_4 0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #ifndef FXAA_HLSL_5\n      #define FXAA_HLSL_5 0\n  #endif\n  /*==========================================================================*/\n  #ifndef FXAA_GREEN_AS_LUMA\n      //\n      // For those using non-linear color,\n      // and either not able to get luma in alpha, or not wanting to,\n      // this enables FXAA to run using green as a proxy for luma.\n      // So with this enabled, no need to pack luma in alpha.\n      //\n      // This will turn off AA on anything which lacks some amount of green.\n      // Pure red and blue or combination of only R and B, will get no AA.\n      //\n      // Might want to lower the settings for both,\n      //    fxaaConsoleEdgeThresholdMin\n      //    fxaaQualityEdgeThresholdMin\n      // In order to insure AA does not get turned off on colors\n      // which contain a minor amount of green.\n      //\n      // 1 = On.\n      // 0 = Off.\n      //\n      #define FXAA_GREEN_AS_LUMA 0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #ifndef FXAA_EARLY_EXIT\n      //\n      // Controls algorithm's early exit path.\n      // On PS3 turning this ON adds 2 cycles to the shader.\n      // On 360 turning this OFF adds 10ths of a millisecond to the shader.\n      // Turning this off on console will result in a more blurry image.\n      // So this defaults to on.\n      //\n      // 1 = On.\n      // 0 = Off.\n      //\n      #define FXAA_EARLY_EXIT 1\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #ifndef FXAA_DISCARD\n      //\n      // Only valid for PC OpenGL currently.\n      // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\n      //\n      // 1 = Use discard on pixels which don't need AA.\n      //     For APIs which enable concurrent TEX+ROP from same surface.\n      // 0 = Return unchanged color on pixels which don't need AA.\n      //\n      #define FXAA_DISCARD 0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #ifndef FXAA_FAST_PIXEL_OFFSET\n      //\n      // Used for GLSL 120 only.\n      //\n      // 1 = GL API supports fast pixel offsets\n      // 0 = do not use fast pixel offsets\n      //\n      #ifdef GL_EXT_gpu_shader4\n          #define FXAA_FAST_PIXEL_OFFSET 1\n      #endif\n      #ifdef GL_NV_gpu_shader5\n          #define FXAA_FAST_PIXEL_OFFSET 1\n      #endif\n      #ifdef GL_ARB_gpu_shader5\n          #define FXAA_FAST_PIXEL_OFFSET 1\n      #endif\n      #ifndef FXAA_FAST_PIXEL_OFFSET\n          #define FXAA_FAST_PIXEL_OFFSET 0\n      #endif\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #ifndef FXAA_GATHER4_ALPHA\n      //\n      // 1 = API supports gather4 on alpha channel.\n      // 0 = API does not support gather4 on alpha channel.\n      //\n      #if (FXAA_HLSL_5 == 1)\n          #define FXAA_GATHER4_ALPHA 1\n      #endif\n      #ifdef GL_ARB_gpu_shader5\n          #define FXAA_GATHER4_ALPHA 1\n      #endif\n      #ifdef GL_NV_gpu_shader5\n          #define FXAA_GATHER4_ALPHA 1\n      #endif\n      #ifndef FXAA_GATHER4_ALPHA\n          #define FXAA_GATHER4_ALPHA 0\n      #endif\n  #endif\n\n\n  /*============================================================================\n                          FXAA QUALITY - TUNING KNOBS\n  ------------------------------------------------------------------------------\n  NOTE the other tuning knobs are now in the shader function inputs!\n  ============================================================================*/\n  #ifndef FXAA_QUALITY_PRESET\n      //\n      // Choose the quality preset.\n      // This needs to be compiled into the shader as it effects code.\n      // Best option to include multiple presets is to\n      // in each shader define the preset, then include this file.\n      //\n      // OPTIONS\n      // -----------------------------------------------------------------------\n      // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\n      // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\n      // 39       - no dither, very expensive\n      //\n      // NOTES\n      // -----------------------------------------------------------------------\n      // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\n      // 13 = about same speed as FXAA 3.9 and better than 12\n      // 23 = closest to FXAA 3.9 visually and performance wise\n      //  _ = the lowest digit is directly related to performance\n      // _  = the highest digit is directly related to style\n      //\n      #define FXAA_QUALITY_PRESET 12\n  #endif\n\n\n  /*============================================================================\n\n                              FXAA QUALITY - PRESETS\n\n  ============================================================================*/\n\n  /*============================================================================\n                        FXAA QUALITY - MEDIUM DITHER PRESETS\n  ============================================================================*/\n  #if (FXAA_QUALITY_PRESET == 10)\n      #define FXAA_QUALITY_PS 3\n      #define FXAA_QUALITY_P0 1.5\n      #define FXAA_QUALITY_P1 3.0\n      #define FXAA_QUALITY_P2 12.0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_QUALITY_PRESET == 11)\n      #define FXAA_QUALITY_PS 4\n      #define FXAA_QUALITY_P0 1.0\n      #define FXAA_QUALITY_P1 1.5\n      #define FXAA_QUALITY_P2 3.0\n      #define FXAA_QUALITY_P3 12.0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_QUALITY_PRESET == 12)\n      #define FXAA_QUALITY_PS 5\n      #define FXAA_QUALITY_P0 1.0\n      #define FXAA_QUALITY_P1 1.5\n      #define FXAA_QUALITY_P2 2.0\n      #define FXAA_QUALITY_P3 4.0\n      #define FXAA_QUALITY_P4 12.0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_QUALITY_PRESET == 13)\n      #define FXAA_QUALITY_PS 6\n      #define FXAA_QUALITY_P0 1.0\n      #define FXAA_QUALITY_P1 1.5\n      #define FXAA_QUALITY_P2 2.0\n      #define FXAA_QUALITY_P3 2.0\n      #define FXAA_QUALITY_P4 4.0\n      #define FXAA_QUALITY_P5 12.0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_QUALITY_PRESET == 14)\n      #define FXAA_QUALITY_PS 7\n      #define FXAA_QUALITY_P0 1.0\n      #define FXAA_QUALITY_P1 1.5\n      #define FXAA_QUALITY_P2 2.0\n      #define FXAA_QUALITY_P3 2.0\n      #define FXAA_QUALITY_P4 2.0\n      #define FXAA_QUALITY_P5 4.0\n      #define FXAA_QUALITY_P6 12.0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_QUALITY_PRESET == 15)\n      #define FXAA_QUALITY_PS 8\n      #define FXAA_QUALITY_P0 1.0\n      #define FXAA_QUALITY_P1 1.5\n      #define FXAA_QUALITY_P2 2.0\n      #define FXAA_QUALITY_P3 2.0\n      #define FXAA_QUALITY_P4 2.0\n      #define FXAA_QUALITY_P5 2.0\n      #define FXAA_QUALITY_P6 4.0\n      #define FXAA_QUALITY_P7 12.0\n  #endif\n\n  /*============================================================================\n                        FXAA QUALITY - LOW DITHER PRESETS\n  ============================================================================*/\n  #if (FXAA_QUALITY_PRESET == 20)\n      #define FXAA_QUALITY_PS 3\n      #define FXAA_QUALITY_P0 1.5\n      #define FXAA_QUALITY_P1 2.0\n      #define FXAA_QUALITY_P2 8.0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_QUALITY_PRESET == 21)\n      #define FXAA_QUALITY_PS 4\n      #define FXAA_QUALITY_P0 1.0\n      #define FXAA_QUALITY_P1 1.5\n      #define FXAA_QUALITY_P2 2.0\n      #define FXAA_QUALITY_P3 8.0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_QUALITY_PRESET == 22)\n      #define FXAA_QUALITY_PS 5\n      #define FXAA_QUALITY_P0 1.0\n      #define FXAA_QUALITY_P1 1.5\n      #define FXAA_QUALITY_P2 2.0\n      #define FXAA_QUALITY_P3 2.0\n      #define FXAA_QUALITY_P4 8.0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_QUALITY_PRESET == 23)\n      #define FXAA_QUALITY_PS 6\n      #define FXAA_QUALITY_P0 1.0\n      #define FXAA_QUALITY_P1 1.5\n      #define FXAA_QUALITY_P2 2.0\n      #define FXAA_QUALITY_P3 2.0\n      #define FXAA_QUALITY_P4 2.0\n      #define FXAA_QUALITY_P5 8.0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_QUALITY_PRESET == 24)\n      #define FXAA_QUALITY_PS 7\n      #define FXAA_QUALITY_P0 1.0\n      #define FXAA_QUALITY_P1 1.5\n      #define FXAA_QUALITY_P2 2.0\n      #define FXAA_QUALITY_P3 2.0\n      #define FXAA_QUALITY_P4 2.0\n      #define FXAA_QUALITY_P5 3.0\n      #define FXAA_QUALITY_P6 8.0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_QUALITY_PRESET == 25)\n      #define FXAA_QUALITY_PS 8\n      #define FXAA_QUALITY_P0 1.0\n      #define FXAA_QUALITY_P1 1.5\n      #define FXAA_QUALITY_P2 2.0\n      #define FXAA_QUALITY_P3 2.0\n      #define FXAA_QUALITY_P4 2.0\n      #define FXAA_QUALITY_P5 2.0\n      #define FXAA_QUALITY_P6 4.0\n      #define FXAA_QUALITY_P7 8.0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_QUALITY_PRESET == 26)\n      #define FXAA_QUALITY_PS 9\n      #define FXAA_QUALITY_P0 1.0\n      #define FXAA_QUALITY_P1 1.5\n      #define FXAA_QUALITY_P2 2.0\n      #define FXAA_QUALITY_P3 2.0\n      #define FXAA_QUALITY_P4 2.0\n      #define FXAA_QUALITY_P5 2.0\n      #define FXAA_QUALITY_P6 2.0\n      #define FXAA_QUALITY_P7 4.0\n      #define FXAA_QUALITY_P8 8.0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_QUALITY_PRESET == 27)\n      #define FXAA_QUALITY_PS 10\n      #define FXAA_QUALITY_P0 1.0\n      #define FXAA_QUALITY_P1 1.5\n      #define FXAA_QUALITY_P2 2.0\n      #define FXAA_QUALITY_P3 2.0\n      #define FXAA_QUALITY_P4 2.0\n      #define FXAA_QUALITY_P5 2.0\n      #define FXAA_QUALITY_P6 2.0\n      #define FXAA_QUALITY_P7 2.0\n      #define FXAA_QUALITY_P8 4.0\n      #define FXAA_QUALITY_P9 8.0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_QUALITY_PRESET == 28)\n      #define FXAA_QUALITY_PS 11\n      #define FXAA_QUALITY_P0 1.0\n      #define FXAA_QUALITY_P1 1.5\n      #define FXAA_QUALITY_P2 2.0\n      #define FXAA_QUALITY_P3 2.0\n      #define FXAA_QUALITY_P4 2.0\n      #define FXAA_QUALITY_P5 2.0\n      #define FXAA_QUALITY_P6 2.0\n      #define FXAA_QUALITY_P7 2.0\n      #define FXAA_QUALITY_P8 2.0\n      #define FXAA_QUALITY_P9 4.0\n      #define FXAA_QUALITY_P10 8.0\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_QUALITY_PRESET == 29)\n      #define FXAA_QUALITY_PS 12\n      #define FXAA_QUALITY_P0 1.0\n      #define FXAA_QUALITY_P1 1.5\n      #define FXAA_QUALITY_P2 2.0\n      #define FXAA_QUALITY_P3 2.0\n      #define FXAA_QUALITY_P4 2.0\n      #define FXAA_QUALITY_P5 2.0\n      #define FXAA_QUALITY_P6 2.0\n      #define FXAA_QUALITY_P7 2.0\n      #define FXAA_QUALITY_P8 2.0\n      #define FXAA_QUALITY_P9 2.0\n      #define FXAA_QUALITY_P10 4.0\n      #define FXAA_QUALITY_P11 8.0\n  #endif\n\n  /*============================================================================\n                        FXAA QUALITY - EXTREME QUALITY\n  ============================================================================*/\n  #if (FXAA_QUALITY_PRESET == 39)\n      #define FXAA_QUALITY_PS 12\n      #define FXAA_QUALITY_P0 1.0\n      #define FXAA_QUALITY_P1 1.0\n      #define FXAA_QUALITY_P2 1.0\n      #define FXAA_QUALITY_P3 1.0\n      #define FXAA_QUALITY_P4 1.0\n      #define FXAA_QUALITY_P5 1.5\n      #define FXAA_QUALITY_P6 2.0\n      #define FXAA_QUALITY_P7 2.0\n      #define FXAA_QUALITY_P8 2.0\n      #define FXAA_QUALITY_P9 2.0\n      #define FXAA_QUALITY_P10 4.0\n      #define FXAA_QUALITY_P11 8.0\n  #endif\n\n\n\n  /*============================================================================\n\n                                  API PORTING\n\n  ============================================================================*/\n  #if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\n      #define FxaaBool bool\n      #define FxaaDiscard discard\n      #define FxaaFloat float\n      #define FxaaFloat2 vec2\n      #define FxaaFloat3 vec3\n      #define FxaaFloat4 vec4\n      #define FxaaHalf float\n      #define FxaaHalf2 vec2\n      #define FxaaHalf3 vec3\n      #define FxaaHalf4 vec4\n      #define FxaaInt2 ivec2\n      #define FxaaSat(x) clamp(x, 0.0, 1.0)\n      #define FxaaTex sampler2D\n  #else\n      #define FxaaBool bool\n      #define FxaaDiscard clip(-1)\n      #define FxaaFloat float\n      #define FxaaFloat2 float2\n      #define FxaaFloat3 float3\n      #define FxaaFloat4 float4\n      #define FxaaHalf half\n      #define FxaaHalf2 half2\n      #define FxaaHalf3 half3\n      #define FxaaHalf4 half4\n      #define FxaaSat(x) saturate(x)\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_GLSL_100 == 1)\n    #define FxaaTexTop(t, p) texture2D(t, p, 0.0)\n    #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_GLSL_120 == 1)\n      // Requires,\n      //  #version 120\n      // And at least,\n      //  #extension GL_EXT_gpu_shader4 : enable\n      //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\n      #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\n      #if (FXAA_FAST_PIXEL_OFFSET == 1)\n          #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\n      #else\n          #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\n      #endif\n      #if (FXAA_GATHER4_ALPHA == 1)\n          // use #extension GL_ARB_gpu_shader5 : enable\n          #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\n          #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\n          #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\n          #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\n      #endif\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_GLSL_130 == 1)\n      // Requires #version 130 or better\n      #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\n      #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\n      #if (FXAA_GATHER4_ALPHA == 1)\n          // use #extension GL_ARB_gpu_shader5 : enable\n          #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\n          #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\n          #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\n          #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\n      #endif\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_HLSL_3 == 1)\n      #define FxaaInt2 float2\n      #define FxaaTex sampler2D\n      #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\n      #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_HLSL_4 == 1)\n      #define FxaaInt2 int2\n      struct FxaaTex { SamplerState smpl; Texture2D tex; };\n      #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\n      #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\n  #endif\n  /*--------------------------------------------------------------------------*/\n  #if (FXAA_HLSL_5 == 1)\n      #define FxaaInt2 int2\n      struct FxaaTex { SamplerState smpl; Texture2D tex; };\n      #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\n      #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\n      #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\n      #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\n      #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\n      #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\n  #endif\n\n\n  /*============================================================================\n                      GREEN AS LUMA OPTION SUPPORT FUNCTION\n  ============================================================================*/\n  #if (FXAA_GREEN_AS_LUMA == 0)\n      FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\n  #else\n      FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\n  #endif\n\n\n\n\n  /*============================================================================\n\n                                FXAA3 QUALITY - PC\n\n  ============================================================================*/\n  #if (FXAA_PC == 1)\n  /*--------------------------------------------------------------------------*/\n  FxaaFloat4 FxaaPixelShader(\n      //\n      // Use noperspective interpolation here (turn off perspective interpolation).\n      // {xy} = center of pixel\n      FxaaFloat2 pos,\n      //\n      // Used only for FXAA Console, and not used on the 360 version.\n      // Use noperspective interpolation here (turn off perspective interpolation).\n      // {xy_} = upper left of pixel\n      // {_zw} = lower right of pixel\n      FxaaFloat4 fxaaConsolePosPos,\n      //\n      // Input color texture.\n      // {rgb_} = color in linear or perceptual color space\n      // if (FXAA_GREEN_AS_LUMA == 0)\n      //     {__a} = luma in perceptual color space (not linear)\n      FxaaTex tex,\n      //\n      // Only used on the optimized 360 version of FXAA Console.\n      // For everything but 360, just use the same input here as for tex.\n      // For 360, same texture, just alias with a 2nd sampler.\n      // This sampler needs to have an exponent bias of -1.\n      FxaaTex fxaaConsole360TexExpBiasNegOne,\n      //\n      // Only used on the optimized 360 version of FXAA Console.\n      // For everything but 360, just use the same input here as for tex.\n      // For 360, same texture, just alias with a 3nd sampler.\n      // This sampler needs to have an exponent bias of -2.\n      FxaaTex fxaaConsole360TexExpBiasNegTwo,\n      //\n      // Only used on FXAA Quality.\n      // This must be from a constant/uniform.\n      // {x_} = 1.0/screenWidthInPixels\n      // {_y} = 1.0/screenHeightInPixels\n      FxaaFloat2 fxaaQualityRcpFrame,\n      //\n      // Only used on FXAA Console.\n      // This must be from a constant/uniform.\n      // This effects sub-pixel AA quality and inversely sharpness.\n      //   Where N ranges between,\n      //     N = 0.50 (default)\n      //     N = 0.33 (sharper)\n      // {x__} = -N/screenWidthInPixels\n      // {_y_} = -N/screenHeightInPixels\n      // {_z_} =  N/screenWidthInPixels\n      // {__w} =  N/screenHeightInPixels\n      FxaaFloat4 fxaaConsoleRcpFrameOpt,\n      //\n      // Only used on FXAA Console.\n      // Not used on 360, but used on PS3 and PC.\n      // This must be from a constant/uniform.\n      // {x__} = -2.0/screenWidthInPixels\n      // {_y_} = -2.0/screenHeightInPixels\n      // {_z_} =  2.0/screenWidthInPixels\n      // {__w} =  2.0/screenHeightInPixels\n      FxaaFloat4 fxaaConsoleRcpFrameOpt2,\n      //\n      // Only used on FXAA Console.\n      // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\n      // This must be from a constant/uniform.\n      // {x__} =  8.0/screenWidthInPixels\n      // {_y_} =  8.0/screenHeightInPixels\n      // {_z_} = -4.0/screenWidthInPixels\n      // {__w} = -4.0/screenHeightInPixels\n      FxaaFloat4 fxaaConsole360RcpFrameOpt2,\n      //\n      // Only used on FXAA Quality.\n      // This used to be the FXAA_QUALITY_SUBPIX define.\n      // It is here now to allow easier tuning.\n      // Choose the amount of sub-pixel aliasing removal.\n      // This can effect sharpness.\n      //   1.00 - upper limit (softer)\n      //   0.75 - default amount of filtering\n      //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\n      //   0.25 - almost off\n      //   0.00 - completely off\n      FxaaFloat fxaaQualitySubpix,\n      //\n      // Only used on FXAA Quality.\n      // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\n      // It is here now to allow easier tuning.\n      // The minimum amount of local contrast required to apply algorithm.\n      //   0.333 - too little (faster)\n      //   0.250 - low quality\n      //   0.166 - default\n      //   0.125 - high quality\n      //   0.063 - overkill (slower)\n      FxaaFloat fxaaQualityEdgeThreshold,\n      //\n      // Only used on FXAA Quality.\n      // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\n      // It is here now to allow easier tuning.\n      // Trims the algorithm from processing darks.\n      //   0.0833 - upper limit (default, the start of visible unfiltered edges)\n      //   0.0625 - high quality (faster)\n      //   0.0312 - visible limit (slower)\n      // Special notes when using FXAA_GREEN_AS_LUMA,\n      //   Likely want to set this to zero.\n      //   As colors that are mostly not-green\n      //   will appear very dark in the green channel!\n      //   Tune by looking at mostly non-green content,\n      //   then start at zero and increase until aliasing is a problem.\n      FxaaFloat fxaaQualityEdgeThresholdMin,\n      //\n      // Only used on FXAA Console.\n      // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\n      // It is here now to allow easier tuning.\n      // This does not effect PS3, as this needs to be compiled in.\n      //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\n      //   Due to the PS3 being ALU bound,\n      //   there are only three safe values here: 2 and 4 and 8.\n      //   These options use the shaders ability to a free *|/ by 2|4|8.\n      // For all other platforms can be a non-power of two.\n      //   8.0 is sharper (default!!!)\n      //   4.0 is softer\n      //   2.0 is really soft (good only for vector graphics inputs)\n      FxaaFloat fxaaConsoleEdgeSharpness,\n      //\n      // Only used on FXAA Console.\n      // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\n      // It is here now to allow easier tuning.\n      // This does not effect PS3, as this needs to be compiled in.\n      //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\n      //   Due to the PS3 being ALU bound,\n      //   there are only two safe values here: 1/4 and 1/8.\n      //   These options use the shaders ability to a free *|/ by 2|4|8.\n      // The console setting has a different mapping than the quality setting.\n      // Other platforms can use other values.\n      //   0.125 leaves less aliasing, but is softer (default!!!)\n      //   0.25 leaves more aliasing, and is sharper\n      FxaaFloat fxaaConsoleEdgeThreshold,\n      //\n      // Only used on FXAA Console.\n      // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\n      // It is here now to allow easier tuning.\n      // Trims the algorithm from processing darks.\n      // The console setting has a different mapping than the quality setting.\n      // This only applies when FXAA_EARLY_EXIT is 1.\n      // This does not apply to PS3,\n      // PS3 was simplified to avoid more shader instructions.\n      //   0.06 - faster but more aliasing in darks\n      //   0.05 - default\n      //   0.04 - slower and less aliasing in darks\n      // Special notes when using FXAA_GREEN_AS_LUMA,\n      //   Likely want to set this to zero.\n      //   As colors that are mostly not-green\n      //   will appear very dark in the green channel!\n      //   Tune by looking at mostly non-green content,\n      //   then start at zero and increase until aliasing is a problem.\n      FxaaFloat fxaaConsoleEdgeThresholdMin,\n      //\n      // Extra constants for 360 FXAA Console only.\n      // Use zeros or anything else for other platforms.\n      // These must be in physical constant registers and NOT immediates.\n      // Immediates will result in compiler un-optimizing.\n      // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\n      FxaaFloat4 fxaaConsole360ConstDir\n  ) {\n  /*--------------------------------------------------------------------------*/\n      FxaaFloat2 posM;\n      posM.x = pos.x;\n      posM.y = pos.y;\n      #if (FXAA_GATHER4_ALPHA == 1)\n          #if (FXAA_DISCARD == 0)\n              FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\n              #if (FXAA_GREEN_AS_LUMA == 0)\n                  #define lumaM rgbyM.w\n              #else\n                  #define lumaM rgbyM.y\n              #endif\n          #endif\n          #if (FXAA_GREEN_AS_LUMA == 0)\n              FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\n              FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\n          #else\n              FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\n              FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\n          #endif\n          #if (FXAA_DISCARD == 1)\n              #define lumaM luma4A.w\n          #endif\n          #define lumaE luma4A.z\n          #define lumaS luma4A.x\n          #define lumaSE luma4A.y\n          #define lumaNW luma4B.w\n          #define lumaN luma4B.z\n          #define lumaW luma4B.x\n      #else\n          FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\n          #if (FXAA_GREEN_AS_LUMA == 0)\n              #define lumaM rgbyM.w\n          #else\n              #define lumaM rgbyM.y\n          #endif\n          #if (FXAA_GLSL_100 == 1)\n            FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\n            FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\n            FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\n            FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\n          #else\n            FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\n            FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\n            FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\n            FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\n          #endif\n      #endif\n  /*--------------------------------------------------------------------------*/\n      FxaaFloat maxSM = max(lumaS, lumaM);\n      FxaaFloat minSM = min(lumaS, lumaM);\n      FxaaFloat maxESM = max(lumaE, maxSM);\n      FxaaFloat minESM = min(lumaE, minSM);\n      FxaaFloat maxWN = max(lumaN, lumaW);\n      FxaaFloat minWN = min(lumaN, lumaW);\n      FxaaFloat rangeMax = max(maxWN, maxESM);\n      FxaaFloat rangeMin = min(minWN, minESM);\n      FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\n      FxaaFloat range = rangeMax - rangeMin;\n      FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\n      FxaaBool earlyExit = range < rangeMaxClamped;\n  /*--------------------------------------------------------------------------*/\n      if(earlyExit)\n          #if (FXAA_DISCARD == 1)\n              FxaaDiscard;\n          #else\n              return rgbyM;\n          #endif\n  /*--------------------------------------------------------------------------*/\n      #if (FXAA_GATHER4_ALPHA == 0)\n          #if (FXAA_GLSL_100 == 1)\n            FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\n            FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\n            FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\n            FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\n          #else\n            FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\n            FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\n            FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\n            FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\n          #endif\n      #else\n          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\n      #endif\n  /*--------------------------------------------------------------------------*/\n      FxaaFloat lumaNS = lumaN + lumaS;\n      FxaaFloat lumaWE = lumaW + lumaE;\n      FxaaFloat subpixRcpRange = 1.0/range;\n      FxaaFloat subpixNSWE = lumaNS + lumaWE;\n      FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\n      FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\n  /*--------------------------------------------------------------------------*/\n      FxaaFloat lumaNESE = lumaNE + lumaSE;\n      FxaaFloat lumaNWNE = lumaNW + lumaNE;\n      FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\n      FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\n  /*--------------------------------------------------------------------------*/\n      FxaaFloat lumaNWSW = lumaNW + lumaSW;\n      FxaaFloat lumaSWSE = lumaSW + lumaSE;\n      FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\n      FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\n      FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\n      FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\n      FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\n      FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\n  /*--------------------------------------------------------------------------*/\n      FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\n      FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\n      FxaaBool horzSpan = edgeHorz >= edgeVert;\n      FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\n  /*--------------------------------------------------------------------------*/\n      if(!horzSpan) lumaN = lumaW;\n      if(!horzSpan) lumaS = lumaE;\n      if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\n      FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\n  /*--------------------------------------------------------------------------*/\n      FxaaFloat gradientN = lumaN - lumaM;\n      FxaaFloat gradientS = lumaS - lumaM;\n      FxaaFloat lumaNN = lumaN + lumaM;\n      FxaaFloat lumaSS = lumaS + lumaM;\n      FxaaBool pairN = abs(gradientN) >= abs(gradientS);\n      FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\n      if(pairN) lengthSign = -lengthSign;\n      FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\n  /*--------------------------------------------------------------------------*/\n      FxaaFloat2 posB;\n      posB.x = posM.x;\n      posB.y = posM.y;\n      FxaaFloat2 offNP;\n      offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\n      offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\n      if(!horzSpan) posB.x += lengthSign * 0.5;\n      if( horzSpan) posB.y += lengthSign * 0.5;\n  /*--------------------------------------------------------------------------*/\n      FxaaFloat2 posN;\n      posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\n      posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\n      FxaaFloat2 posP;\n      posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\n      posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\n      FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\n      FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\n      FxaaFloat subpixE = subpixC * subpixC;\n      FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\n  /*--------------------------------------------------------------------------*/\n      if(!pairN) lumaNN = lumaSS;\n      FxaaFloat gradientScaled = gradient * 1.0/4.0;\n      FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\n      FxaaFloat subpixF = subpixD * subpixE;\n      FxaaBool lumaMLTZero = lumaMM < 0.0;\n  /*--------------------------------------------------------------------------*/\n      lumaEndN -= lumaNN * 0.5;\n      lumaEndP -= lumaNN * 0.5;\n      FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\n      FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\n      if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\n      if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\n      FxaaBool doneNP = (!doneN) || (!doneP);\n      if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\n      if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\n  /*--------------------------------------------------------------------------*/\n      if(doneNP) {\n          if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n          if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n          if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n          if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n          doneN = abs(lumaEndN) >= gradientScaled;\n          doneP = abs(lumaEndP) >= gradientScaled;\n          if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\n          if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\n          doneNP = (!doneN) || (!doneP);\n          if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\n          if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\n  /*--------------------------------------------------------------------------*/\n          #if (FXAA_QUALITY_PS > 3)\n          if(doneNP) {\n              if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n              if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n              if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n              if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n              doneN = abs(lumaEndN) >= gradientScaled;\n              doneP = abs(lumaEndP) >= gradientScaled;\n              if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\n              if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\n              doneNP = (!doneN) || (!doneP);\n              if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\n              if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\n  /*--------------------------------------------------------------------------*/\n              #if (FXAA_QUALITY_PS > 4)\n              if(doneNP) {\n                  if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                  if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                  if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                  if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                  doneN = abs(lumaEndN) >= gradientScaled;\n                  doneP = abs(lumaEndP) >= gradientScaled;\n                  if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\n                  if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\n                  doneNP = (!doneN) || (!doneP);\n                  if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\n                  if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\n  /*--------------------------------------------------------------------------*/\n                  #if (FXAA_QUALITY_PS > 5)\n                  if(doneNP) {\n                      if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                      if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                      if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                      if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                      doneN = abs(lumaEndN) >= gradientScaled;\n                      doneP = abs(lumaEndP) >= gradientScaled;\n                      if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\n                      if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\n                      doneNP = (!doneN) || (!doneP);\n                      if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\n                      if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\n  /*--------------------------------------------------------------------------*/\n                      #if (FXAA_QUALITY_PS > 6)\n                      if(doneNP) {\n                          if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                          if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                          if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                          if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                          doneN = abs(lumaEndN) >= gradientScaled;\n                          doneP = abs(lumaEndP) >= gradientScaled;\n                          if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\n                          if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\n                          doneNP = (!doneN) || (!doneP);\n                          if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\n                          if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\n  /*--------------------------------------------------------------------------*/\n                          #if (FXAA_QUALITY_PS > 7)\n                          if(doneNP) {\n                              if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                              if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                              if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                              if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                              doneN = abs(lumaEndN) >= gradientScaled;\n                              doneP = abs(lumaEndP) >= gradientScaled;\n                              if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\n                              if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\n                              doneNP = (!doneN) || (!doneP);\n                              if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\n                              if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\n  /*--------------------------------------------------------------------------*/\n      #if (FXAA_QUALITY_PS > 8)\n      if(doneNP) {\n          if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n          if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n          if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n          if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n          doneN = abs(lumaEndN) >= gradientScaled;\n          doneP = abs(lumaEndP) >= gradientScaled;\n          if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\n          if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\n          doneNP = (!doneN) || (!doneP);\n          if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\n          if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\n  /*--------------------------------------------------------------------------*/\n          #if (FXAA_QUALITY_PS > 9)\n          if(doneNP) {\n              if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n              if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n              if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n              if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n              doneN = abs(lumaEndN) >= gradientScaled;\n              doneP = abs(lumaEndP) >= gradientScaled;\n              if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\n              if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\n              doneNP = (!doneN) || (!doneP);\n              if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\n              if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\n  /*--------------------------------------------------------------------------*/\n              #if (FXAA_QUALITY_PS > 10)\n              if(doneNP) {\n                  if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                  if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                  if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                  if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                  doneN = abs(lumaEndN) >= gradientScaled;\n                  doneP = abs(lumaEndP) >= gradientScaled;\n                  if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\n                  if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\n                  doneNP = (!doneN) || (!doneP);\n                  if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\n                  if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\n  /*--------------------------------------------------------------------------*/\n                  #if (FXAA_QUALITY_PS > 11)\n                  if(doneNP) {\n                      if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                      if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                      if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                      if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                      doneN = abs(lumaEndN) >= gradientScaled;\n                      doneP = abs(lumaEndP) >= gradientScaled;\n                      if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\n                      if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\n                      doneNP = (!doneN) || (!doneP);\n                      if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\n                      if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\n  /*--------------------------------------------------------------------------*/\n                      #if (FXAA_QUALITY_PS > 12)\n                      if(doneNP) {\n                          if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                          if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                          if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                          if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                          doneN = abs(lumaEndN) >= gradientScaled;\n                          doneP = abs(lumaEndP) >= gradientScaled;\n                          if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\n                          if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\n                          doneNP = (!doneN) || (!doneP);\n                          if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\n                          if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\n  /*--------------------------------------------------------------------------*/\n                      }\n                      #endif\n  /*--------------------------------------------------------------------------*/\n                  }\n                  #endif\n  /*--------------------------------------------------------------------------*/\n              }\n              #endif\n  /*--------------------------------------------------------------------------*/\n          }\n          #endif\n  /*--------------------------------------------------------------------------*/\n      }\n      #endif\n  /*--------------------------------------------------------------------------*/\n                          }\n                          #endif\n  /*--------------------------------------------------------------------------*/\n                      }\n                      #endif\n  /*--------------------------------------------------------------------------*/\n                  }\n                  #endif\n  /*--------------------------------------------------------------------------*/\n              }\n              #endif\n  /*--------------------------------------------------------------------------*/\n          }\n          #endif\n  /*--------------------------------------------------------------------------*/\n      }\n  /*--------------------------------------------------------------------------*/\n      FxaaFloat dstN = posM.x - posN.x;\n      FxaaFloat dstP = posP.x - posM.x;\n      if(!horzSpan) dstN = posM.y - posN.y;\n      if(!horzSpan) dstP = posP.y - posM.y;\n  /*--------------------------------------------------------------------------*/\n      FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\n      FxaaFloat spanLength = (dstP + dstN);\n      FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\n      FxaaFloat spanLengthRcp = 1.0/spanLength;\n  /*--------------------------------------------------------------------------*/\n      FxaaBool directionN = dstN < dstP;\n      FxaaFloat dst = min(dstN, dstP);\n      FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\n      FxaaFloat subpixG = subpixF * subpixF;\n      FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\n      FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\n  /*--------------------------------------------------------------------------*/\n      FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\n      FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\n      if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\n      if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\n      #if (FXAA_DISCARD == 1)\n          return FxaaTexTop(tex, posM);\n      #else\n          return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\n      #endif\n  }\n  /*==========================================================================*/\n  #endif\n`;\n\nexport const fragmentMain = `\n  // FXAA pass start\n  if (fxaaEnabled) {\n    outgoingColor = FxaaPixelShader(\n      uv,\n      vec4(0.0),\n      tDiffuse,\n      tDiffuse,\n      tDiffuse,\n      fxaaResolution,\n      vec4(0.0),\n      vec4(0.0),\n      vec4(0.0),\n      0.75,\n      0.166,\n      0.0833,\n      0.0,\n      0.0,\n      0.0,\n      vec4(0.0)\n    );\n    // TODO avoid querying texture twice for same texel\n    outgoingColor.a = texture2D(tDiffuse, uv).a;\n  }\n  // FXAA pass end\n`\n\nexport function guiControls(gui: GUI, material: Material) {\n  const guiPass = gui.addFolder('fxaa pass');\n  guiPass.open();\n  guiPass.add(material.uniforms.fxaaEnabled, 'value', 0, 1, 1).name('enabled');\n}\n\n\n","// PI constant\nexport const PI = `\n  #define PI 3.14159265359\n`;\n\n/* Taken from threejs common.glsl */\nexport const rand = `\n  highp float rand( const in vec2 uv ) {\n    const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n    highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n    return fract(sin(sn) * c);\n  }\n`;\n","import { GUI } from 'dat.gui';\nimport { Material } from 'three';\nimport { rand, PI } from '../../../shaders/math.glsl';\n\nexport const uniforms = {\n  filmEnabled: { value: 1 },\n  filmNoiseIntensity: { value: 0.35 },\n  filmScanIntensity: { value: 0.05 },\n  filmScanCount: { value: 4096 },\n  filmGrayscale: { value: 0 }\n};\n\nexport const fragmentUniforms = `\n  uniform bool filmEnabled;\n  uniform bool filmGrayscale;\n  uniform float filmNoiseIntensity;\n  uniform float filmScanIntensity;\n  uniform float filmScanCount;\n`;\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Film grain & scanlines shader\n *\n * - ported from HLSL to WebGL / GLSL\n * http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html\n *\n * Screen Space Static Postprocessor\n *\n * Produces an analogue noise overlay similar to a film grain / TV static\n *\n * Original implementation and noise algorithm\n * Pat 'Hawthorne' Shearon\n *\n * Optimized scanlines + noise version with intensity scaling\n * Georg 'Leviathan' Steinrohder\n *\n * This version is provided under a Creative Commons Attribution 3.0 License\n * http://creativecommons.org/licenses/by/3.0/\n */\n\nexport const fragmentPass = `\n  ${PI}\n  ${rand}\n\n  vec3 filmPass(vec3 outgoingColor, vec2 uv) {\n    // Make some noise\n    float dx = rand(uv + time);\n\n    // Add noise\n    vec3 cResult = outgoingColor.rgb + outgoingColor.rgb * clamp(0.1 + dx, 0.0, 1.0);\n\n    // Get us a sine and cosine\n    vec2 sc = vec2(sin(uv.y * filmScanCount), cos(uv.y * filmScanCount));\n\n    // Add scanlines\n    cResult += outgoingColor.rgb * vec3(sc.x, sc.y, sc.x) * filmScanIntensity;\n\n    // Interpolate between source and result by intensity\n    cResult = outgoingColor.rgb + clamp(filmNoiseIntensity, 0.0,1.0) * (cResult - outgoingColor.rgb);\n\n    // Convert to grayscale if desired\n    if (filmGrayscale) {\n      cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\n    }\n\n    return cResult;\n  }\n`;\n\nexport const fragmentMain = `\n  // Film pass start\n  if (filmEnabled) {\n    outgoingColor.rgb = filmPass(outgoingColor.rgb, uv);\n  }\n  // Film pass end\n`\n\nexport function guiControls(gui: GUI, material: Material) {\n  const guiPass = gui.addFolder('film pass');\n  guiPass.open();\n  guiPass.add(material.uniforms.filmEnabled, 'value', 0, 1, 1).name('enabled');\n  guiPass.add(material.uniforms.filmNoiseIntensity, 'value', 0, 1).name('noise intensity');\n  guiPass.add(material.uniforms.filmScanIntensity, 'value', 0, 1).name('scan intensity');\n  guiPass.add(material.uniforms.filmScanCount, 'value', 0, 4096).name('scan count');\n  guiPass.add(material.uniforms.filmGrayscale, 'value', 0, 1, 1).name('gayscale');\n}\n","import { fragmentUniforms as fxaaFragmentUniforms,\n         fragmentMain as fxaaFragmentMain,\n         fragmentPass as fxaaFragmentPass }\n         from '../../passes/fxaa.glsl';\n\nimport { fragmentUniforms as filmFragmentUniforms,\n         fragmentMain as filmFragmentMain,\n         fragmentPass as filmFragmentPass }\n         from '../../passes/film.glsl';\n\nexport const vertexShader = `\n  void main() {\n    gl_Position = vec4(position, 1.0);\n  }\n`;\n\nexport const fragmentShader = `\n  uniform vec2 resolution;\n  uniform float time;\n  uniform sampler2D tDiffuse;\n  // FXAA pass\n  ${fxaaFragmentUniforms}\n  ${fxaaFragmentPass}\n  // Film pass\n  ${filmFragmentUniforms}\n  ${filmFragmentPass}\n  void main() {\n    vec2 uv = gl_FragCoord.xy / resolution;\n    vec4 outgoingColor = texture2D(tDiffuse, uv);\n    // FXAA pass\n    ${fxaaFragmentMain}\n    // Film pass\n    ${filmFragmentMain}\n    gl_FragColor.rgb = outgoingColor.rgb;\n    gl_FragColor.a = outgoingColor.a;\n  }\n`;\n","import {\n  Scene,\n  Mesh,\n  ShaderMaterial,\n  Vector2,\n  UniformsUtils,\n  WebGLRenderTarget,\n  BufferGeometry,\n  OrthographicCamera,\n  PerspectiveCamera\n} from 'three';\nimport { GUI } from 'dat.gui';\nimport { vertexShader, fragmentShader } from './shader.glsl';\nimport { getRenderBufferSize } from '../../../resize';\nimport { uniforms as filmUniforms, guiControls as filmGuiControls } from '../../passes/film.glsl';\nimport { uniforms as fxaaUniforms, guiControls as fxaaGuiControls } from '../../passes/fxaa.glsl';\nimport renderer from '../../../renderer';\n\n/**\n * The final pass contains the post fx and is then output to the screen\n *\n * @export\n * @class FinalPass\n */\nexport default class FinalPass {\n  gui: GUI;\n  scene: Scene;\n  camera: OrthographicCamera;\n  mesh: Mesh;\n\n  constructor(gui: GUI, geometry: BufferGeometry, camera: OrthographicCamera) {\n    // Create gui\n    this.gui = gui.addFolder('final pass');\n    this.gui.open();\n    // Create scene\n    this.scene = new Scene();\n    // Use camera from post processing\n    this.camera = camera;\n    const { width, height } = getRenderBufferSize();\n    // Setup shader and combine uniforms from any post fx you want to include\n    const material = new ShaderMaterial({\n      uniforms: UniformsUtils.merge([\n        {\n          time: {\n            value: 0\n          },\n          tDiffuse: {\n            // Keep it the same as threejs for reusability\n            value: null\n          },\n          resolution: {\n            value: new Vector2(width, height)\n          }\n        },\n        fxaaUniforms,\n        filmUniforms\n      ]),\n      vertexShader,\n      fragmentShader\n    });\n\n    // Add gui controls\n    fxaaGuiControls(this.gui, material);\n    filmGuiControls(this.gui, material);\n\n    // Create the mesh and turn off matrixAutoUpdate\n    this.mesh = new Mesh(geometry, material);\n    this.mesh.matrixAutoUpdate = false;\n    this.mesh.updateMatrix();\n    this.scene.add(this.mesh);\n  }\n\n  /**\n   * Resize handler, update uniforms\n   *\n   * @param {Number} width\n   * @param {Number} height\n   * @memberof FinalPass\n   */\n  resize(width: number, height: number) {\n    this.mesh.material.uniforms.resolution.value.x = width;\n    this.mesh.material.uniforms.resolution.value.y = height;\n    this.mesh.material.uniforms.fxaaResolution.value.x = 1 / width;\n    this.mesh.material.uniforms.fxaaResolution.value.y = 1 / height;\n  }\n\n  /**\n   * Render the pass and output to screen\n   *\n   * @param {*} scene\n   * @param {WebGLRenderTarget} renderTarget\n   * @param {Number} delta\n   * @memberof FinalPass\n   */\n  render(scene: Scene, renderTarget: WebGLRenderTarget, delta: number) {\n    renderer.setRenderTarget(renderTarget);\n    renderer.render(scene.scene, scene.camera);\n    renderer.setRenderTarget(null);\n    this.mesh.material.uniforms.tDiffuse.value = renderTarget.texture;\n    this.mesh.material.uniforms.time.value += delta;\n    renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Render the final pass when used with the screenshot utility\n   *\n   * @param {Scene} scene\n   * @param {PerspectiveCamera} camera\n   * @param {WebGLRenderTarget} renderTargetA\n   * @param {WebGLRenderTarget} renderTargetB\n   * @param {number} delta\n   * @memberof FinalPass\n   */\n  screenshotRender(\n    scene: Scene,\n    camera: PerspectiveCamera,\n    renderTargetA: WebGLRenderTarget,\n    renderTargetB: WebGLRenderTarget,\n    delta: number\n  ) {\n    this.mesh.material.uniforms.tDiffuse.value = renderTargetA.texture;\n    this.mesh.material.uniforms.time.value += delta;\n    renderer.setRenderTarget(renderTargetB);\n    renderer.render(this.scene, this.camera);\n  }\n}\n","import BaseScene from '../base/base-scene';\nimport { VECTOR_ZERO } from '../../utils/math';\n\nexport default class EmptyScene extends BaseScene {\n  constructor(id: string, clearColor: number) {\n    super({ id, clearColor });\n    this.camera.position.set(0, 0, 10);\n    this.camera.lookAt(VECTOR_ZERO);\n  }\n}\n","import { OrthographicCamera, WebGLRenderTarget } from 'three';\nimport { GUI } from 'dat.gui';\nimport { bigTriangle } from '../../utils/geometry';\nimport { createRenderTarget } from '../render-target';\nimport { getRenderBufferSize } from '../resize';\nimport TransitionPass from './passes/transition-pass/transition-pass';\nimport FinalPass from './passes/final-pass/final-pass';\nimport EmptyScene from '../../scenes/empty/empty-scene';\nimport renderer from '../renderer';\nimport settings from '../../settings';\nimport BaseScene from '../../scenes/base/base-scene';\n\nexport default class PostProcessing {\n  gui: GUI;\n  camera: OrthographicCamera;\n  renderTargetA: WebGLRenderTarget;\n  renderTargetB: WebGLRenderTarget;\n  renderTargetC: WebGLRenderTarget;\n  transitionPass: TransitionPass;\n  finalPass: FinalPass;\n  currentScene: BaseScene;\n  lastPass: mixed;\n  sceneA: BaseScene;\n  sceneB: BaseScene;\n\n  constructor(gui: GUI) {\n    // Create gui\n    this.gui = gui.addFolder('post processing');\n    this.gui.open();\n    // Create big triangle geometry, faster than using quad\n    const geometry = bigTriangle();\n    // Post camera\n    this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    // Setup render targets\n    const { width, height } = getRenderBufferSize();\n    const options = { stencilBuffer: false };\n    this.renderTargetA = createRenderTarget(width, height, options);\n    this.renderTargetB = createRenderTarget(width, height, options);\n    this.renderTargetC = createRenderTarget(width, height, options);\n\n    // Create passes\n    this.transitionPass = new TransitionPass(this.gui, geometry, this.camera);\n    this.finalPass = new FinalPass(this.gui, geometry, this.camera);\n\n    // Create empty scenes\n    const sceneA = new EmptyScene('post scene a', 0x000000);\n    const sceneB = new EmptyScene('post scene b', 0x000000);\n    sceneA.setup();\n    sceneB.setup();\n\n    this.setScenes(sceneA, sceneB);\n    this.resize();\n  }\n\n  /**\n   * Set the two main scenes used for the transition pass\n   *\n   * @param {BaseScene} sceneA\n   * @param {BaseScene} sceneB\n   * @memberof PostProcessing\n   */\n  setScenes(sceneA: BaseScene, sceneB: BaseScene) {\n    this.sceneA = sceneA;\n    this.sceneB = sceneB;\n  }\n\n  /**\n   * Resize handler for passes and render targets\n   *\n   * @memberof PostProcessing\n   */\n  resize() {\n    const scale = settings.devCamera ? settings.viewportPreviewScale : 1;\n    let { width, height } = getRenderBufferSize();\n    width *= scale;\n    height *= scale;\n    this.renderTargetA.setSize(width, height);\n    this.renderTargetB.setSize(width, height);\n    this.renderTargetC.setSize(width, height);\n    this.transitionPass.resize(width, height);\n    this.finalPass.resize(width, height);\n  }\n\n  /**\n   * Render passes and output to screen\n   *\n   * @param {Number} delta\n   * @memberof PostProcessing\n   */\n  render(delta: number) {\n    // Determine the current scene based on the transition pass value\n    this.currentScene = this.transitionPass.mesh.material.uniforms.transition.value === 0 ? this.sceneA : this.sceneB;\n    this.lastPass = this.currentScene;\n\n    // If the transition pass is active\n    if (this.transitionPass.active) {\n      this.transitionPass.render(this.sceneA, this.sceneB, this.renderTargetA, this.renderTargetB, delta);\n      this.lastPass = this.transitionPass;\n    } else {\n      // Otherwise we just render the current scene\n      renderer.setClearColor(this.currentScene.clearColor);\n      this.currentScene.update(delta);\n    }\n\n    // Render the final pass which contains all the post fx\n    this.finalPass.render(this.lastPass, this.renderTargetC, delta);\n  }\n}\n","import { BufferGeometry, BufferAttribute } from 'three';\n\n/**\n * Return a triangle that covers screen-space\n * Mainly used for post processing\n * https://github.com/mikolalysenko/a-big-triangle\n *\n * @export\n * @returns\n */\nexport function bigTriangle() {\n  const geometry = new BufferGeometry();\n  const attribute = new BufferAttribute(new Float32Array([-1, -1, 0, -1, 4, 0, 4, -1, 0]), 3);\n  geometry.setAttribute('position', attribute);\n  geometry.setIndex([0, 2, 1]);\n  return geometry;\n}\n","import { WebGLRenderer } from 'three';\nimport graphics, { getGraphicsMode, getTier } from './graphics';\nimport settings from '../settings';\nimport { setRendererSize } from './resize';\nimport PostProcessing from './post-processing/post-processing';\nimport { gui } from '../utils/gui';\n\nconst { pixelRatio, antialias } = graphics[getGraphicsMode()];\n\nconst renderer = new WebGLRenderer({\n  antialias,\n  powerPreference: 'high-performance',\n  stencil: false\n});\nrenderer.setClearColor(0x000000);\n\n// Enable shader errors during dev\nrenderer.debug.checkShaderErrors = settings.isDevelopment;\n\nconst guiRendering = gui.addFolder('rendering');\nguiRendering.open();\n\nrenderer.setPixelRatio(pixelRatio);\nrenderer.setScissorTest(true);\nsetRendererSize(renderer, window.innerWidth, window.innerHeight);\n\nexport const postProcessing = new PostProcessing(guiRendering);\n\nconst gl = renderer.getContext();\nconst gpuInfo = gl.getExtension('WEBGL_debug_renderer_info');\nconst gpu = gl.getParameter(gpuInfo.UNMASKED_RENDERER_WEBGL);\n\nif (settings.isDevelopment) console.log(`Graphics: ${getGraphicsMode()}\\nGPU: ${gpu}\\nTier: ${getTier()}`);\n\nexport default renderer;\n","import { WebGLRenderer } from 'three';\nimport settings from '../settings';\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author jetienne / http://jetienne.com/\n */\n\n/**\n * Provide info on THREE.WebGLRenderer\n *\n * @param {Object} renderer the renderer to update\n * @param {Object} Camera the camera to update\n */\nconst RendererStats = function() {\n  const container = document.createElement('div');\n  container.style.cssText = 'width:80px;opacity:0.9;cursor:pointer;z-index:100000;top:48px;position:absolute;';\n\n  const msDiv = document.createElement('div');\n  msDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:rgb(0, 0, 0);';\n  container.appendChild(msDiv);\n\n  const msText = document.createElement('div');\n  msText.style.cssText =\n    'color:rgb(255, 255, 255);font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n  msText.innerHTML = 'WebGLRenderer';\n  msDiv.appendChild(msText);\n\n  const msTexts = [];\n  const nLines = 9;\n  for (var i = 0; i < nLines; i++) {\n    msTexts[i] = document.createElement('div');\n    msTexts[i].style.cssText =\n      'color:rgb(255, 255, 255);background-color:rgb(0, 0, 0);font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n    msDiv.appendChild(msTexts[i]);\n    msTexts[i].innerHTML = '-';\n  }\n\n  let lastTime = Date.now();\n  return {\n    domElement: container,\n\n    update: function(webglRenderer: WebGLRenderer) {\n      // sanity check\n      console.assert(webglRenderer instanceof WebGLRenderer);\n\n      // refresh only 30time per second\n      if (Date.now() - lastTime < 1000 / 30) return;\n      lastTime = Date.now();\n\n      msTexts[0].textContent = '=== Memory ===';\n      msTexts[1].textContent = 'Programs: ' + webglRenderer.info.programs.length;\n      msTexts[2].textContent = 'Geometries: ' + webglRenderer.info.memory.geometries;\n      msTexts[3].textContent = 'Textures: ' + webglRenderer.info.memory.textures;\n      msTexts[4].textContent = '=== Render ===';\n      msTexts[5].textContent = 'Calls: ' + webglRenderer.info.render.calls;\n      msTexts[6].textContent = 'Triangles: ' + webglRenderer.info.render.triangles;\n      msTexts[7].textContent = 'Lines: ' + webglRenderer.info.render.lines;\n      msTexts[8].textContent = 'Points: ' + webglRenderer.info.render.points;\n    }\n  };\n};\n\nexport function RenderStatsWrapper() {\n  return {\n    domElement: document.createElement('div'),\n    update: (renderer: WebGLRenderer) => {}\n  };\n}\n\nconst Cls = settings.isDevelopment ? RendererStats : RenderStatsWrapper;\n\nexport default Cls;\n","import settings from '../settings';\nimport RendererStats from './render-stats';\n\nconst rendererStats = new RendererStats();\nif (settings.stats) {\n  rendererStats.domElement.style.position = 'absolute';\n  rendererStats.domElement.style.left = '0px';\n  rendererStats.domElement.style.top = '48px';\n  if (document.body) document.body.appendChild(rendererStats.domElement);\n}\n\nexport { rendererStats };\n\nif (process.env.NODE_ENV !== 'production' && settings.stats) {\n  const stats = require('@jam3/stats')();\n  stats.domElement.style.cssText = 'position:fixed;left:0;top:0;z-index:10000';\n}\n","import { TweenLite } from 'gsap/gsap-core';\nimport { Mesh, RingBufferGeometry, ShaderMaterial } from 'three';\nimport BaseScene from '../base/base-scene';\nimport { TWO_PI, VECTOR_ZERO } from '../../utils/math';\nimport settings from '../../settings';\n\nexport const PRELOADER_SCENE_ID = 'preloader';\n\nexport default class PreloaderScene extends BaseScene {\n  constructor() {\n    super({ id: PRELOADER_SCENE_ID });\n    this.camera.position.set(0, 0, 10);\n    this.camera.lookAt(VECTOR_ZERO);\n  }\n\n  /**\n   * Create and setup any objects for the scene\n   *\n   * @memberof PreloaderScene\n   */\n  async createSceneObjects() {\n    await new Promise((resolve, reject) => {\n      try {\n        // Create a spinner mesh to show loading progression\n        this.spinner = new Mesh(\n          new RingBufferGeometry(0.9, 1, 32, 1, 0, TWO_PI * 0.75),\n          new ShaderMaterial({\n            transparent: true,\n            uniforms: {\n              opacity: { value: 0 }\n            },\n            vertexShader: `\n              varying vec2 vUv;\n              void main() {\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n              }\n            `,\n            fragmentShader: `\n              uniform float opacity;\n              varying vec2 vUv;\n              void main() {\n                gl_FragColor = vec4(vUv, 1.0, vUv.y * opacity);\n              }\n          `\n          })\n        );\n        this.spinner.name = 'spinner';\n        this.scene.add(this.spinner);\n        this.animateInit();\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  preloadGpuCullScene = (culled: boolean) => {\n    this.spinner.material.uniforms.opacity.value = culled ? 1 : 0;\n  };\n\n  animateInit = () => {\n    TweenLite.killTweensOf(this.spinner.material.uniforms.opacity);\n    this.spinner.material.uniforms.opacity.value = 0;\n  };\n\n  async animateIn() {\n    await new Promise((resolve, reject) => {\n      if (settings.skipTransitions) {\n        resolve();\n        return;\n      }\n      TweenLite.to(this.spinner.material.uniforms.opacity, 1, {\n        value: 1,\n        onComplete: () => {\n          resolve();\n        }\n      });\n    });\n  }\n\n  async animateOut() {\n    await new Promise((resolve, reject) => {\n      if (settings.skipTransitions) {\n        resolve();\n        return;\n      }\n      TweenLite.to(this.spinner.material.uniforms.opacity, 1, {\n        value: 0,\n        onComplete: () => {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Update loop\n   *\n   * @memberof PreloaderScene\n   */\n  update = (delta: number) => {\n    this.spinner.rotation.z -= delta * 2;\n  };\n}\n","/**\n * A class to manage the state of the webgl app\n *\n * @export\n * @class AppState\n */\nexport default class AppState {\n  ready: boolean;\n\n  constructor(props: Object = {}) {\n    this.ready = props.ready || false;\n  }\n\n  equals(state: AppState) {\n    return this.ready === state.ready;\n  }\n\n  clone() {\n    return new AppState({\n      ready: this.ready\n    });\n  }\n}\n","import { UniformsUtils } from 'three';\n\nconst hooks = {\n  vertex: {\n    preTransform: 'before:#include <begin_vertex>\\n',\n    postTransform: 'after:#include <project_vertex>\\n',\n    preNormal: 'before:#include <beginnormal_vertex>\\n'\n  },\n  fragment: {\n    preFragColor: 'before:gl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n',\n    postFragColor: 'after:gl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n',\n    postNormal: 'after:#include <normal_fragment>\\n',\n    postFragFog: 'after:#include <fog_fragment>\\n'\n  }\n};\n\nfunction replace(shader: string, hooks: Object, config: Object) {\n  Object.keys(hooks).forEach((hook: string) => {\n    if (config[hook]) {\n      const parts = hooks[hook].split(':');\n      const line = parts[1];\n      switch (parts[0]) {\n        case 'after': {\n          shader = shader.replace(\n            line,\n            `${line}\n            ${config[hook]}`\n          );\n          break;\n        }\n        default: {\n          // before\n          shader = shader.replace(\n            line,\n            `${config[hook]}\n            ${line}`\n          );\n          break;\n        }\n      }\n    }\n  });\n  return shader;\n}\n\n/**\n * The material modifier injects custom shader code and uniforms\n * to three's built in materials\n *\n * @export\n * @param {Object} shader\n * @param {Object} config\n * @returns\n */\nexport default function materialModifier(shader: Object, config: Object) {\n  shader.uniforms = UniformsUtils.merge([shader.uniforms, config.uniforms]);\n\n  shader.vertexShader = `\n    ${config.vertexShader.uniforms}\n    ${config.vertexShader.functions}\n    ${shader.vertexShader}\n  `;\n  shader.fragmentShader = `\n    ${config.fragmentShader.uniforms}\n    ${config.fragmentShader.functions}\n    ${shader.fragmentShader}\n  `;\n\n  // Injection\n  shader.vertexShader = replace(shader.vertexShader, hooks.vertex, config.vertexShader);\n  shader.fragmentShader = replace(shader.fragmentShader, hooks.fragment, config.fragmentShader);\n\n  return shader;\n}\n","// https://github.com/hughsk/glsl-noise\n\nexport const classicNoise2D = `\n//\n// GLSL textureless classic 2D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat classicNoise2D(vec2 P)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n`;\n\nexport const classicNoise3D = `\n//\n// GLSL textureless classic 3D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat classicNoise3D(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n`;\n\nexport const classicNoise4D = `\n//\n// GLSL textureless classic 4D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 fade(vec4 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat classicNoise4D(vec4 P)\n{\n  vec4 Pi0 = floor(P); // Integer part for indexing\n  vec4 Pi1 = Pi0 + 1.0; // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec4 Pf0 = fract(P); // Fractional part for interpolation\n  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = vec4(Pi0.zzzz);\n  vec4 iz1 = vec4(Pi1.zzzz);\n  vec4 iw0 = vec4(Pi0.wwww);\n  vec4 iw1 = vec4(Pi1.wwww);\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n  vec4 ixy00 = permute(ixy0 + iw0);\n  vec4 ixy01 = permute(ixy0 + iw1);\n  vec4 ixy10 = permute(ixy1 + iw0);\n  vec4 ixy11 = permute(ixy1 + iw1);\n\n  vec4 gx00 = ixy00 * (1.0 / 7.0);\n  vec4 gy00 = floor(gx00) * (1.0 / 7.0);\n  vec4 gz00 = floor(gy00) * (1.0 / 6.0);\n  gx00 = fract(gx00) - 0.5;\n  gy00 = fract(gy00) - 0.5;\n  gz00 = fract(gz00) - 0.5;\n  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\n  vec4 sw00 = step(gw00, vec4(0.0));\n  gx00 -= sw00 * (step(0.0, gx00) - 0.5);\n  gy00 -= sw00 * (step(0.0, gy00) - 0.5);\n\n  vec4 gx01 = ixy01 * (1.0 / 7.0);\n  vec4 gy01 = floor(gx01) * (1.0 / 7.0);\n  vec4 gz01 = floor(gy01) * (1.0 / 6.0);\n  gx01 = fract(gx01) - 0.5;\n  gy01 = fract(gy01) - 0.5;\n  gz01 = fract(gz01) - 0.5;\n  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\n  vec4 sw01 = step(gw01, vec4(0.0));\n  gx01 -= sw01 * (step(0.0, gx01) - 0.5);\n  gy01 -= sw01 * (step(0.0, gy01) - 0.5);\n\n  vec4 gx10 = ixy10 * (1.0 / 7.0);\n  vec4 gy10 = floor(gx10) * (1.0 / 7.0);\n  vec4 gz10 = floor(gy10) * (1.0 / 6.0);\n  gx10 = fract(gx10) - 0.5;\n  gy10 = fract(gy10) - 0.5;\n  gz10 = fract(gz10) - 0.5;\n  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\n  vec4 sw10 = step(gw10, vec4(0.0));\n  gx10 -= sw10 * (step(0.0, gx10) - 0.5);\n  gy10 -= sw10 * (step(0.0, gy10) - 0.5);\n\n  vec4 gx11 = ixy11 * (1.0 / 7.0);\n  vec4 gy11 = floor(gx11) * (1.0 / 7.0);\n  vec4 gz11 = floor(gy11) * (1.0 / 6.0);\n  gx11 = fract(gx11) - 0.5;\n  gy11 = fract(gy11) - 0.5;\n  gz11 = fract(gz11) - 0.5;\n  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\n  vec4 sw11 = step(gw11, vec4(0.0));\n  gx11 -= sw11 * (step(0.0, gx11) - 0.5);\n  gy11 -= sw11 * (step(0.0, gy11) - 0.5);\n\n  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\n  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\n  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\n  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\n  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\n  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\n  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\n  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\n  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\n  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\n  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\n  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\n  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\n  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\n  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\n  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\n\n  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\n  g0000 *= norm00.x;\n  g0100 *= norm00.y;\n  g1000 *= norm00.z;\n  g1100 *= norm00.w;\n\n  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\n  g0001 *= norm01.x;\n  g0101 *= norm01.y;\n  g1001 *= norm01.z;\n  g1101 *= norm01.w;\n\n  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\n  g0010 *= norm10.x;\n  g0110 *= norm10.y;\n  g1010 *= norm10.z;\n  g1110 *= norm10.w;\n\n  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\n  g0011 *= norm11.x;\n  g0111 *= norm11.y;\n  g1011 *= norm11.z;\n  g1111 *= norm11.w;\n\n  float n0000 = dot(g0000, Pf0);\n  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\n  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\n  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\n  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\n  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\n  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\n  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\n  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\n  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\n  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\n  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\n  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\n  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\n  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\n  float n1111 = dot(g1111, Pf1);\n\n  vec4 fade_xyzw = fade(Pf0);\n  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\n  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\n  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\n  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\n  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\n  return 2.2 * n_xyzw;\n}\n`;\n\nexport const periodicNoise2D = `\n//\n// GLSL textureless classic 2D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise, periodic variant\nfloat periodicNoise2D(vec2 P, vec2 rep)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, rep.xyxy); // To create noise with explicit period\n  Pi = mod289(Pi);        // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n`;\n\nexport const periodicNoise3D = `\n//\n// GLSL textureless classic 3D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise, periodic variant\nfloat periodicNoise3D(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n`;\n\nexport const periodicNoise4D = `\n//\n// GLSL textureless classic 4D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 fade(vec4 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise, periodic version\nfloat periodicNoise4D(vec4 P, vec4 rep)\n{\n  vec4 Pi0 = mod(floor(P), rep); // Integer part modulo rep\n  vec4 Pi1 = mod(Pi0 + 1.0, rep); // Integer part + 1 mod rep\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec4 Pf0 = fract(P); // Fractional part for interpolation\n  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = vec4(Pi0.zzzz);\n  vec4 iz1 = vec4(Pi1.zzzz);\n  vec4 iw0 = vec4(Pi0.wwww);\n  vec4 iw1 = vec4(Pi1.wwww);\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n  vec4 ixy00 = permute(ixy0 + iw0);\n  vec4 ixy01 = permute(ixy0 + iw1);\n  vec4 ixy10 = permute(ixy1 + iw0);\n  vec4 ixy11 = permute(ixy1 + iw1);\n\n  vec4 gx00 = ixy00 * (1.0 / 7.0);\n  vec4 gy00 = floor(gx00) * (1.0 / 7.0);\n  vec4 gz00 = floor(gy00) * (1.0 / 6.0);\n  gx00 = fract(gx00) - 0.5;\n  gy00 = fract(gy00) - 0.5;\n  gz00 = fract(gz00) - 0.5;\n  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\n  vec4 sw00 = step(gw00, vec4(0.0));\n  gx00 -= sw00 * (step(0.0, gx00) - 0.5);\n  gy00 -= sw00 * (step(0.0, gy00) - 0.5);\n\n  vec4 gx01 = ixy01 * (1.0 / 7.0);\n  vec4 gy01 = floor(gx01) * (1.0 / 7.0);\n  vec4 gz01 = floor(gy01) * (1.0 / 6.0);\n  gx01 = fract(gx01) - 0.5;\n  gy01 = fract(gy01) - 0.5;\n  gz01 = fract(gz01) - 0.5;\n  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\n  vec4 sw01 = step(gw01, vec4(0.0));\n  gx01 -= sw01 * (step(0.0, gx01) - 0.5);\n  gy01 -= sw01 * (step(0.0, gy01) - 0.5);\n\n  vec4 gx10 = ixy10 * (1.0 / 7.0);\n  vec4 gy10 = floor(gx10) * (1.0 / 7.0);\n  vec4 gz10 = floor(gy10) * (1.0 / 6.0);\n  gx10 = fract(gx10) - 0.5;\n  gy10 = fract(gy10) - 0.5;\n  gz10 = fract(gz10) - 0.5;\n  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\n  vec4 sw10 = step(gw10, vec4(0.0));\n  gx10 -= sw10 * (step(0.0, gx10) - 0.5);\n  gy10 -= sw10 * (step(0.0, gy10) - 0.5);\n\n  vec4 gx11 = ixy11 * (1.0 / 7.0);\n  vec4 gy11 = floor(gx11) * (1.0 / 7.0);\n  vec4 gz11 = floor(gy11) * (1.0 / 6.0);\n  gx11 = fract(gx11) - 0.5;\n  gy11 = fract(gy11) - 0.5;\n  gz11 = fract(gz11) - 0.5;\n  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\n  vec4 sw11 = step(gw11, vec4(0.0));\n  gx11 -= sw11 * (step(0.0, gx11) - 0.5);\n  gy11 -= sw11 * (step(0.0, gy11) - 0.5);\n\n  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\n  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\n  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\n  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\n  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\n  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\n  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\n  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\n  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\n  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\n  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\n  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\n  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\n  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\n  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\n  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\n\n  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\n  g0000 *= norm00.x;\n  g0100 *= norm00.y;\n  g1000 *= norm00.z;\n  g1100 *= norm00.w;\n\n  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\n  g0001 *= norm01.x;\n  g0101 *= norm01.y;\n  g1001 *= norm01.z;\n  g1101 *= norm01.w;\n\n  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\n  g0010 *= norm10.x;\n  g0110 *= norm10.y;\n  g1010 *= norm10.z;\n  g1110 *= norm10.w;\n\n  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\n  g0011 *= norm11.x;\n  g0111 *= norm11.y;\n  g1011 *= norm11.z;\n  g1111 *= norm11.w;\n\n  float n0000 = dot(g0000, Pf0);\n  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\n  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\n  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\n  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\n  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\n  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\n  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\n  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\n  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\n  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\n  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\n  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\n  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\n  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\n  float n1111 = dot(g1111, Pf1);\n\n  vec4 fade_xyzw = fade(Pf0);\n  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\n  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\n  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\n  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\n  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\n  return 2.2 * n_xyzw;\n}\n`;\n\nexport const simplexNoise2D = `\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat simplexNoise2D(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n`;\n\nexport const simplexNoise3D = `\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplexNoise3D(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n`;\n\nexport const simplexNoise4D = `\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n\n  return p;\n  }\n\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat simplexNoise4D(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n// First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n// Permutations\n  i = mod289(i);\n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n  }\n`;\n","import { simplexNoise3D } from '../../../../shaders/noise.glsl';\n\nexport default {\n  uniforms: {\n    time: { value: 0 }\n  },\n  vertexShader: {\n    uniforms: `\n      uniform float time;\n      varying vec3 vNormal;\n    `,\n    functions: `\n      ${simplexNoise3D}\n    `,\n    preTransform: ``,\n    postTransform: `\n      float speed = time * 0.5;\n      float noise = simplexNoise3D(position.xyz * 0.75 + speed) * 0.15;\n      transformed = normal * noise;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position + transformed, 1.0);\n      vNormal = normal;\n    `\n  },\n  fragmentShader: {\n    uniforms: `\n      varying vec3 vNormal;\n    `,\n    functions: ``,\n    preFragColor: `\n      vec3 normal = normalize(vNormal);\n      outgoingLight *= (normal * 0.5 + 0.5);\n    `,\n    postFragColor: `\n      gl_FragColor.a = opacity;\n    `\n  }\n};\n","import EventEmitter from 'eventemitter3';\nimport detect from '@jam3/detect';\n\ntype touchControlsOptions = {|\n  touchStart?: boolean,\n  touchMove?: boolean,\n  touchEnd?: boolean,\n  hover?: boolean\n|};\n\nexport type pointersArray = {|\n  x: number,\n  y: number,\n  normalX: number,\n  normalY: number\n|};\n\ntype pointersEvent = {|\n  push: ({| x: number, y: number, normalX: number, normalY: number |}) => void,\n  touches: {|\n    pageX: boolean,\n    pageY: boolean,\n    length: number\n  |},\n  MouseEvent: MouseEvent\n|};\n\n/**\n * A class to normalize mouse and touch events\n *\n * @export\n * @class TouchControls\n * @extends {EventEmitter}\n */\nexport default class TouchControls extends EventEmitter {\n  constructor(element: HTMLElement, options: touchControlsOptions) {\n    super();\n    this.element = element;\n    this.pointers = [];\n    this.options = Object.assign(\n      {\n        hover: false, // mouse only\n        touchStart: true,\n        touchMove: true,\n        touchEnd: true\n      },\n      options\n    );\n    this.touchesLength = 0;\n    this.isDown = false;\n    this.bindEvents(true);\n  }\n\n  /**\n   * Bind mouse and touch events\n   *\n   * @memberof TouchControls\n   */\n  bindEvents = (bind: boolean) => {\n    const listener = bind ? 'addEventListener' : 'removeEventListener';\n    const isDesktop = detect.device.isDesktop;\n    if (this.options.touchStart) this.element[listener](isDesktop ? 'mousedown' : 'touchstart', this.onTouchStart);\n    if (this.options.touchMove) this.element[listener](isDesktop ? 'mousemove' : 'touchmove', this.onTouchMove);\n    if (this.options.touchEnd) this.element[listener](isDesktop ? 'mouseup' : 'touchend', this.onTouchEnd);\n    if (isDesktop) {\n      if (this.options.hover) this.element[listener]('mouseover', this.onMouseOver);\n      if (this.options.hover) this.element[listener]('mouseout', this.onMouseOut);\n    }\n  };\n\n  /**\n   * Update the list of current inputs\n   * and set the data\n   *\n   * @memberof TouchControls\n   */\n  setPointers = (event: pointersEvent) => {\n    this.pointers = [];\n    if (event.touches) {\n      this.touchesLength = event.touches.length;\n      for (let i = 0; i < this.touchesLength; i++) {\n        const pointer = event.touches[i];\n        this.pointers.push({\n          x: pointer.pageX,\n          y: pointer.pageY,\n          normalX: pointer.pageX / window.innerWidth,\n          normalY: pointer.pageY / window.innerHeight\n        });\n      }\n    } else {\n      this.pointers.push({\n        x: event.pageX,\n        y: event.pageY,\n        normalX: event.pageX / window.innerWidth,\n        normalY: event.pageY / window.innerHeight\n      });\n    }\n  };\n\n  /**\n   * Touch start handler\n   *\n   * @memberof TouchControls\n   */\n  onTouchStart = (event: pointersEvent) => {\n    this.isDown = true;\n    this.setPointers(event);\n    this.emit('start', this.pointers);\n  };\n\n  /**\n   * Touch move handler\n   *\n   * @memberof TouchControls\n   */\n  onTouchMove = (event: pointersEvent) => {\n    this.onMouseMove(event);\n    if (!this.isDown) return;\n    this.setPointers(event);\n    this.emit('move', this.pointers);\n  };\n\n  /**\n   * Touch end handler\n   *\n   * @memberof TouchControls\n   */\n  onTouchEnd = () => {\n    this.isDown = false;\n    this.emit('end', this.pointers);\n  };\n\n  /**\n   * Mouse move handler\n   *\n   * @memberof TouchControls\n   */\n  onMouseMove = (event: pointersEvent) => {\n    this.setPointers(event);\n    this.emit('mousemove', this.pointers);\n  };\n\n  /**\n   * Mouse over handler\n   *\n   * @memberof TouchControls\n   */\n  onMouseOver = (event: pointersEvent) => {\n    this.emit('hover', true);\n  };\n\n  /**\n   * Mouse out handler\n   *\n   * @memberof TouchControls\n   */\n  onMouseOut = (event: pointersEvent) => {\n    this.emit('hover', false);\n  };\n\n  /**\n   * Dispose and unbind events\n   *\n   * @memberof TouchControls\n   */\n  dispose = () => {\n    this.bindEvents(false);\n  };\n}\n","import { Object3D, Raycaster, Vector2, PerspectiveCamera } from 'three';\nimport EventEmitter from 'eventemitter3';\nimport TouchControls from './touch-controls';\nimport type pointersArray from './touch-controls';\nimport renderer from '../rendering/renderer';\n\n/**\n * Adds mouse and touch events to Object3D inherited objects\n *\n * @export\n * @class InteractiveObject\n * @extends {EventEmitter}\n */\nexport default class InteractiveObject extends EventEmitter {\n  constructor(object: Object3D, camera: PerspectiveCamera, options: Object = {}) {\n    super();\n    this.object = object;\n    this.camera = camera;\n    this.options = Object.assign(\n      {\n        mouseMove: false, // raycast everytime the mouse moves\n        touchStart: true, // only fires when clicking down on an object successfully\n        touchMove: true, // fires when mouse or touch is moved on and off an object\n        touchEnd: true // fires when touch or mouse is released on and off an object\n      },\n      options\n    );\n    this.touchControls = new TouchControls(renderer.domElement, { hover: true });\n    this.raycaster = new Raycaster();\n    this.coords = new Vector2();\n    this.intersects = null;\n    this.fired = {\n      hoverOut: true, // Only fire hover out once per rollover\n      hoverOver: false // Only fire hover out once per rollover\n    };\n    this.bindEvents(true);\n  }\n\n  /**\n   * Bind mouse and touch events\n   *\n   * @memberof InteractiveObject\n   */\n  bindEvents = (bind: boolean) => {\n    const listener = bind ? 'on' : 'off';\n    if (this.options.touchStart) this.touchControls[listener]('start', this.onTouchStart);\n    if (this.options.touchMove) this.touchControls[listener]('move', this.onTouchMove);\n    if (this.options.touchMove) this.touchControls[listener]('mousemove', this.onTouchMove);\n    if (this.options.touchEnd || this.options.touchMove) this.touchControls[listener]('end', this.onTouchEnd);\n  };\n\n  /**\n   * Touch start handler\n   *\n   * @memberof InteractiveObject\n   */\n  onTouchStart = (event: pointersArray[]) => {\n    this.setCoords(event[0].normalX, event[0].normalY);\n    this.intersected = this.raycast();\n    if (this.intersected) this.emit('start', this.intersects[0]);\n  };\n\n  /**\n   * Touch and mouse move handler\n   *\n   * @memberof InteractiveObject\n   */\n  onTouchMove = (event: pointersArray[]) => {\n    this.setCoords(event[0].normalX, event[0].normalY);\n    this.intersected = this.raycast();\n    this.hovering = this.intersected;\n    if (this.intersected) {\n      if (!this.fired.hoverOver || this.options.mouseMove) this.emit('hover', true, this.intersects[0]);\n      this.fired.hoverOut = false;\n      this.fired.hoverOver = true;\n    } else if (!this.fired.hoverOut) {\n      this.fired.hoverOut = true;\n      this.fired.hoverOver = false;\n      this.emit('hover', false);\n    }\n  };\n\n  /**\n   * Touch and hover out handler\n   *\n   * @memberof InteractiveObject\n   */\n  onTouchEnd = (event: pointersArray[]) => {\n    if (this.hovering) {\n      this.hovering = false;\n      this.emit('hover', false);\n    }\n    if (this.intersected) {\n      this.intersected = false;\n      this.emit('end');\n    }\n  };\n\n  /**\n   * Set the screenspace coords for the raycaster\n   *\n   * @memberof InteractiveObject\n   */\n  setCoords = (normalX: number, normalY: number) => {\n    this.coords.x = normalX * 2 - 1;\n    this.coords.y = -normalY * 2 + 1;\n  };\n\n  /**\n   * Raycast against the object\n   *\n   * @memberof InteractiveObject\n   */\n  raycast = (): boolean => {\n    this.raycaster.setFromCamera(this.coords, this.camera);\n    this.intersects = this.raycaster.intersectObject(this.object);\n    return this.intersects.length > 0;\n  };\n\n  /**\n   * Dispose and unbind events\n   *\n   * @memberof InteractiveObject\n   */\n  dispose = () => {\n    this.touchControls.dispose();\n    this.bindEvents(false);\n  };\n}\n","import { TweenLite } from 'gsap/gsap-core';\nimport { Mesh, MeshLambertMaterial, SphereBufferGeometry, PerspectiveCamera } from 'three';\nimport materialModifier from '../../../../utils/material-modifier';\nimport shaderConfig from './shader.glsl';\nimport InteractiveObject from '../../../../interaction/interactive-object';\nimport { getGraphicsMode, GRAPHICS_HIGH } from '../../../../rendering/graphics';\n\nexport default class Sphere {\n  camera: PerspectiveCamera;\n  shader: Object;\n  mesh: Mesh;\n  interactiveObject: InteractiveObject;\n\n  constructor(camera: PerspectiveCamera) {\n    this.camera = camera;\n\n    // Use less polys on normal graphics mode\n    const divisions = getGraphicsMode() === GRAPHICS_HIGH ? 64 : 32;\n    const geometry = new SphereBufferGeometry(1, divisions, divisions);\n    const material = new MeshLambertMaterial({ transparent: true, opacity: 0 });\n\n    this.shader = undefined;\n    let compiled = false;\n    // Customise the lambert material\n    material.onBeforeCompile = (shader: Object) => {\n      if (compiled) return;\n      compiled = true;\n      this.shader = materialModifier(shader, shaderConfig);\n    };\n\n    this.mesh = new Mesh(geometry, material);\n    this.interactiveObject = new InteractiveObject(this.mesh, this.camera, {\n      touchStart: true,\n      touchMove: true,\n      touchEnd: true,\n      mouseMove: false\n    });\n    this.interactiveObject.on('start', this.onStart);\n    this.interactiveObject.on('hover', this.onHover);\n    this.interactiveObject.on('end', this.onEnd);\n  }\n\n  onStart = (event: Object) => {\n    // console.log('start', event);\n    this.scaleMesh(true);\n  };\n\n  onHover = (over: boolean, event: Object) => {\n    // console.log(over ? 'over' : 'out', over ? event : '');\n  };\n\n  onEnd = () => {\n    // console.log('end');\n    this.scaleMesh(false);\n  };\n\n  preloadGpuCullScene = (culled: boolean) => {\n    this.mesh.material.opacity = culled ? 1 : 0;\n  };\n\n  animateInit = () => {\n    TweenLite.killTweensOf(this.mesh.material.opacity);\n    this.mesh.material.opacity = 0;\n  };\n\n  async animateIn() {\n    await new Promise((resolve, reject) => {\n      TweenLite.to(this.mesh.material, 1, {\n        opacity: 1,\n        onComplete: () => {\n          resolve();\n        }\n      });\n    });\n  }\n\n  async animateOut() {\n    await new Promise((resolve, reject) => {\n      TweenLite.to(this.mesh.material, 1, {\n        opacity: 0,\n        onComplete: () => {\n          resolve();\n        }\n      });\n    });\n  }\n\n  scaleMesh = (over: boolean) => {\n    TweenLite.killTweensOf(this.mesh.scale);\n    TweenLite.to(this.mesh.scale, 0.5, {\n      x: over ? 1.6 : 1,\n      y: over ? 1.6 : 1,\n      z: over ? 1.6 : 1\n    });\n  };\n\n  /**\n   * Update loop\n   *\n   * @param {Number} delta\n   * @memberof Sphere\n   */\n  update(delta: number) {\n    if (this.shader) {\n      this.shader.uniforms.time.value += delta;\n    }\n  }\n}\n","import { AmbientLight } from 'three';\nimport { GUI } from 'dat.gui';\nimport settings from '../settings';\n\n/**\n * Utility for creating ambient lights\n *\n * @export\n * @class Ambient\n */\nexport default class Ambient {\n  settings: Object;\n  light: AmbientLight;\n  gui: GUI;\n  guiParent: GUI;\n\n  constructor(options: Object = {}) {\n    this.settings = Object.assign(\n      {\n        color: 0xd4d4d4,\n        intensity: 0.6,\n        guiOpen: false\n      },\n      options\n    );\n    this.light = new AmbientLight(this.settings.color, this.settings.intensity);\n  }\n\n  gui(guiParent: GUI) {\n    this.guiParent = guiParent;\n    this.gui = guiParent.addFolder('ambient');\n    if (this.settings.guiOpen) this.gui.open();\n    this.gui.add(this.light, 'intensity', 0, 1, settings.guiPrecision);\n    this.gui.addColor(this.settings, 'color').onChange(this.onChange);\n  }\n\n  onChange = () => {\n    this.light.color.setHex(this.settings.color);\n  };\n\n  dispose() {\n    this.guiParent.removeFolder(this.gui.name);\n  }\n}\n","import { DirectionalLight, DirectionalLightHelper } from 'three';\nimport { GUI } from 'dat.gui';\nimport settings from '../settings';\n\n/**\n * Utility for creating directional lights\n *\n * @export\n * @class Directional\n */\nexport default class Directional {\n  settings: Object;\n  light: DirectionalLight;\n  gui: GUI;\n  guiParent: GUI;\n  helper: DirectionalLightHelper;\n\n  constructor(options: Object = {}) {\n    this.settings = Object.assign(\n      {\n        color: 0xd4d4d4,\n        intensity: 0.6,\n        guiOpen: false\n      },\n      options\n    );\n    this.light = new DirectionalLight(this.settings.color, this.settings.intensity);\n    this.light.position.set(1, 1, 1);\n    this.helper = new DirectionalLightHelper(this.light);\n  }\n\n  gui(guiParent: GUI) {\n    this.guiParent = guiParent;\n    this.gui = guiParent.addFolder('directional');\n    if (this.settings.guiOpen) this.gui.open();\n    this.gui.addColor(this.settings, 'color').onChange(this.onChange);\n    this.gui.add(this.light, 'intensity', 0, 1, settings.guiPrecision);\n    const range = 1;\n    this.gui\n      .add(this.light.position, 'x', -range, range)\n      .step(settings.guiPrecision)\n      .name('direction x');\n    this.gui\n      .add(this.light.position, 'y', -range, range)\n      .step(settings.guiPrecision)\n      .name('direction y');\n    this.gui\n      .add(this.light.position, 'z', -range, range)\n      .step(settings.guiPrecision)\n      .name('direction z');\n  }\n\n  onChange = () => {\n    this.light.color.setHex(this.settings.color);\n    this.helper.update();\n  };\n\n  dispose() {\n    this.guiParent.removeFolder(this.gui.name);\n  }\n}\n","import Asset from '../../loading/asset';\nimport Loader from '../../loading/loaders/loader';\n\nexport default [\n  new Asset({\n    id: 'test-image',\n    src: '/assets/webgl/test/test-128.jpg',\n    type: Loader.image\n  }),\n  new Asset({\n    id: 'test-json',\n    src: '/assets/webgl/test/test.json',\n    type: Loader.json\n  }),\n  new Asset({\n    id: 'test-texture',\n    src: '/assets/webgl/test/test-128.jpg',\n    type: Loader.threeTexture\n  }),\n  new Asset({\n    id: 'scene-gltf',\n    src: '/assets/webgl/test/scene.glb',\n    type: Loader.threeGLTF\n  }),\n  new Asset({\n    id: 'cube-fbx',\n    src: '/assets/webgl/test/cube.fbx',\n    type: Loader.threeFBX\n  })\n];\n","import { Mesh, SphereBufferGeometry, BackSide, ShaderMaterial, Color } from 'three';\nimport { GUI } from 'dat.gui';\nimport { vertexShader, fragmentShader } from './shader.glsl';\nimport { GRAPHICS_HIGH, GRAPHICS_NORMAL, getGraphicsMode } from '../../../../rendering/graphics';\n\nexport default class Background {\n  gui: GUI;\n  guiParent: GUI;\n  config: Object;\n  mesh: Mesh;\n\n  constructor(gui: GUI) {\n    this.guiParent = gui;\n\n    this.config = {\n      color0: 0x000000,\n      color1: 0x1b1b1b\n    };\n\n    const material = new ShaderMaterial({\n      uniforms: {\n        color0: {\n          value: new Color(this.config.color0)\n        },\n        color1: {\n          value: new Color(this.config.color1)\n        },\n        strength: {\n          value: 2.5\n        },\n        powStrength: {\n          value: 1.3\n        }\n      },\n      vertexShader,\n      fragmentShader,\n      side: BackSide\n    });\n\n    this.gui = gui.addFolder('background');\n    this.gui.open();\n\n    this.gui\n      .add(material.uniforms.strength, 'value', 0, 10)\n      .name('strength')\n      .onChange(this.onChange);\n    this.gui\n      .add(material.uniforms.powStrength, 'value', 0, 10)\n      .name('powStrength')\n      .onChange(this.onChange);\n    this.gui.addColor(this.config, 'color0').onChange(this.onChange);\n    this.gui.addColor(this.config, 'color1').onChange(this.onChange);\n\n    const divisionSettings = {\n      [GRAPHICS_HIGH]: [32, 16],\n      [GRAPHICS_NORMAL]: [18, 8]\n    };\n    const divisions = divisionSettings[getGraphicsMode()];\n\n    this.mesh = new Mesh(new SphereBufferGeometry(50, divisions[0], divisions[1]), material);\n    this.mesh.matrixAutoUpdate = false;\n    this.mesh.updateMatrix();\n  }\n\n  onChange = () => {\n    this.mesh.material.uniforms.color0.value.setHex(this.config.color0);\n    this.mesh.material.uniforms.color1.value.setHex(this.config.color1);\n  };\n}\n","export const vertexShader = `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\n\nexport const fragmentShader = `\n  uniform vec3 color0;\n  uniform vec3 color1;\n  uniform float strength;\n  uniform float powStrength;\n  varying vec2 vUv;\n\n  void main() {\n    float y = distance(vec2(0.5), vec2(0.5, vUv.y)) * strength;\n    y = pow(y, powStrength);\n    vec3 color = mix(color0, color1, y);\n    gl_FragColor = vec4(color, 1.0);\n  }\n`;\n","import BaseScene from '../base/base-scene';\nimport { VECTOR_ZERO } from '../../utils/math';\nimport Sphere from './objects/sphere/sphere';\nimport Ambient from '../../lights/ambient';\nimport Directional from '../../lights/directional';\nimport assets from './assets';\nimport Background from './objects/background/background';\n\nexport const LANDING_SCENE_ID = 'landing';\n\nexport default class LandingScene extends BaseScene {\n  constructor() {\n    const lights = [new Ambient(), new Directional()];\n    super({ id: LANDING_SCENE_ID, assets, gui: true, guiOpen: true, lights, controls: true });\n    this.camera.position.set(0, 0, 5);\n    this.camera.lookAt(VECTOR_ZERO);\n  }\n\n  /**\n   * Create and setup any objects for the scene\n   *\n   * @memberof LandingScene\n   */\n  async createSceneObjects() {\n    await new Promise((resolve, reject) => {\n      try {\n        this.background = new Background(this.gui);\n        this.scene.add(this.background.mesh);\n        this.sphere = new Sphere(this.camera);\n        this.scene.add(this.sphere.mesh);\n        this.animateInit();\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  preloadGpuCullScene = (culled: boolean) => {\n    this.sphere.preloadGpuCullScene(culled);\n  };\n\n  animateInit = () => {\n    return this.sphere.animateInit();\n  };\n\n  animateIn = () => {\n    return this.sphere.animateIn();\n  };\n\n  animateOut = () => {\n    return this.sphere.animateOut();\n  };\n\n  /**\n   * Update loop\n   *\n   * @memberof LandingScene\n   */\n  update = (delta: number) => {\n    this.sphere.update(delta);\n  };\n}\n","export default [];\n","import {\n  Vector3,\n  CatmullRomCurve3,\n  PerspectiveCamera,\n  Group,\n  Mesh,\n  SphereBufferGeometry,\n  MeshBasicMaterial,\n  Geometry,\n  Line,\n  LineBasicMaterial\n} from 'three';\nimport EventEmitter from 'eventemitter3';\nimport { GUI } from 'dat.gui';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls';\nimport renderer from '../../rendering/renderer';\nimport { GUIWrapper } from '../../utils/gui';\n\nexport type DollyPoint = {|\n  x: number,\n  y: number,\n  z: number\n|};\n\nexport interface DollyData {\n  steps: number;\n  origin: DollyPoint[];\n  lookat: DollyPoint[];\n}\n\nexport type HelperOptions = {\n  linesVisible: boolean,\n  controlsVisible: boolean,\n  pointsVisible: boolean\n};\n\nconst ORIGIN = 'origin';\nconst LOOKAT = 'lookat';\n\n// Create reuseable geometry and materials\nconst helperGeometry = new SphereBufferGeometry(0.1, 16, 16);\nconst helperMaterial = new MeshBasicMaterial();\nconst helperLineMaterialOrigin = new LineBasicMaterial({\n  color: 0xffffff\n});\nconst helperLineMaterialLookat = new LineBasicMaterial({\n  color: 0xffff00\n});\n\nexport default class CameraDolly extends EventEmitter {\n  steps: number;\n  origin: Vector3[];\n  lookat: Vector3[];\n  curves: Object;\n\n  constructor(\n    id: string,\n    data: DollyData,\n    gui: GUI | GUIWrapper,\n    camera: PerspectiveCamera,\n    control: OrbitControls,\n    helperOptions: HelperOptions\n  ) {\n    super();\n    // Container to contain any 3d objects\n    this.group = new Group();\n    // Smoothness of camera path\n    this.steps = data.steps;\n    // The dev camera\n    this.camera = camera;\n    // Active orbit control\n    this.control = control;\n    // Origin points\n    this.origin = [];\n    // Lookat points\n    this.lookat = [];\n    // Create gui\n    this.gui = gui.addFolder(`${id} camera dolly`);\n\n    // Convert point to vectors\n    data.origin.forEach((point: DollyPoint) => {\n      this.origin.push(new Vector3(point.x, point.y, point.z));\n    });\n\n    data.lookat.forEach((point: DollyPoint) => {\n      this.lookat.push(new Vector3(point.x, point.y, point.z));\n    });\n\n    // Create curves\n    this.curves = {\n      [ORIGIN]: this.createSmoothSpline(this.origin, this.steps),\n      [LOOKAT]: this.createSmoothSpline(this.lookat, this.steps)\n    };\n\n    // Add transform controls\n    this.controls = new Group();\n    this.controls.visible = helperOptions.controlsVisible;\n    this.group.add(this.controls);\n\n    this.points = new Group();\n    this.points.visible = helperOptions.pointsVisible;\n    this.group.add(this.points);\n\n    // List of positions from each path\n    // These get updated from the transform controls\n    this.curvePoints = {\n      [ORIGIN]: [],\n      [LOOKAT]: []\n    };\n\n    // Add a transform control for each point\n    this.origin.forEach((point: Vector3, i: number) => {\n      this.addControl(ORIGIN, i, point);\n    });\n    this.lookat.forEach((point: Vector3, i: number) => {\n      this.addControl(LOOKAT, i, point);\n    });\n\n    // Create visible curves\n    this.lines = new Group();\n    this.lines.visible = helperOptions.linesVisible;\n    // List of currently visible line meshes\n    this.lineMeshes = [];\n    this.group.add(this.lines);\n\n    // Create helper lines to see the paths\n    this.createLine(this.curves.origin.points, helperLineMaterialOrigin);\n    this.createLine(this.curves.lookat.points, helperLineMaterialLookat);\n\n    this.gui.add(this, 'steps', 5, 100, 1).onChange(this.rebuild);\n    this.gui\n      .add(this.controls, 'visible')\n      .name('controls')\n      .onChange((value: boolean) => {\n        this.toggleControls(value);\n      });\n    this.gui.add(this.points, 'visible').name('points');\n    this.gui.add(this.lines, 'visible').name('lines');\n    this.gui.add(this, 'export');\n    this.gui.open();\n  }\n\n  /**\n   * Toggle the visibility of the helpers and gui\n   *\n   * @memberof CameraDolly\n   */\n  toggleVisibility = (visible: boolean) => {\n    this.group.visible = visible;\n    this.gui[visible ? 'open' : 'close']();\n    this.toggleControls(visible);\n  };\n\n  /**\n   * Toggle transform controls\n   *\n   * @param {boolean} enabled\n   * @memberof CameraDolly\n   */\n  toggleControls(enabled: boolean) {\n    for (let i = 0; i < this.controls.children.length; i++) {\n      this.controls.children[i].enabled = this.controls.visible && this.group.visible;\n    }\n  }\n\n  /**\n   * Create a smooth spline from the data points\n   *\n   * @memberof CameraDolly\n   */\n  createSmoothSpline = (positions: Vector3[], totalPoints: number = 10) => {\n    let curve = new CatmullRomCurve3(positions);\n    const points = curve.getPoints(totalPoints);\n    curve = new CatmullRomCurve3(points);\n    return {\n      curve,\n      points\n    };\n  };\n\n  /**\n   * Get the camera origin and lookat by a nornalised time value 0 - 1\n   *\n   * @memberof Dolly\n   */\n  getCameraDataByTime = (time: number = 0) => {\n    const origin: Vector3 = this.curves.origin.curve.getPointAt(time);\n    const lookat: Vector3 = this.curves.lookat.curve.getPointAt(time);\n    return {\n      origin,\n      lookat\n    };\n  };\n\n  /**\n   * Recreate the curves after the points change\n   *\n   * @memberof CameraDolly\n   */\n  updateSplines = () => {\n    this.curves.origin = this.createSmoothSpline(this.origin, this.steps);\n    this.curves.lookat = this.createSmoothSpline(this.lookat, this.steps);\n  };\n\n  /**\n   * Add a transform control and helper\n   *\n   * @memberof CameraDolly\n   */\n  addControl = (id: string, index: number, point: Vector3) => {\n    // Create mesh\n    const mesh = new Mesh(helperGeometry, helperMaterial);\n    mesh.position.copy(point);\n    this.points.add(mesh);\n\n    // Create control\n    const control = new TransformControls(this.camera, renderer.domElement);\n    control.enabled = this.controls.visible;\n    this.controls.add(control);\n    control.addEventListener('dragging-changed', this.onTransformChanged);\n    control.attach(mesh);\n\n    this.curvePoints[id][index] = mesh.position;\n  };\n\n  /**\n   * Create a helper line for the curve\n   *\n   * @memberof CameraDolly\n   */\n  createLine = (vertices: Vector3[], material: LineBasicMaterial) => {\n    const geometry = new Geometry();\n    geometry.vertices = vertices;\n    const line = new Line(geometry, material);\n    this.lines.add(line);\n    this.lineMeshes.push(line);\n  };\n\n  /**\n   * Remove old lines\n   *\n   * @memberof CameraDolly\n   */\n  removeLines() {\n    for (let i = 0; i < this.lineMeshes.length; i++) {\n      this.lines.remove(this.lineMeshes[i]);\n    }\n  }\n\n  /**\n   * When the transform control is manipulated, disable the orbit controls\n   *\n   * @memberof CameraDolly\n   */\n  onTransformChanged = (event: any) => {\n    this.control.enabled = !event.value;\n    this.rebuild();\n  };\n\n  /**\n   * Rebuild the curves and update the points\n   *\n   * @memberof CameraDolly\n   */\n  rebuild = () => {\n    for (let i = 0; i < this.origin.length; i++) {\n      this.origin[i].copy(this.curvePoints[ORIGIN][i]);\n    }\n    for (let i = 0; i < this.lookat.length; i++) {\n      this.lookat[i].copy(this.curvePoints[LOOKAT][i]);\n    }\n    this.updateSplines();\n    this.removeLines();\n    this.createLine(this.curves.origin.points, helperLineMaterialOrigin);\n    this.createLine(this.curves.lookat.points, helperLineMaterialLookat);\n  };\n\n  /**\n   * Export data to json\n   *\n   * @memberof CameraDolly\n   */\n  export = () => {\n    const data = JSON.stringify(\n      {\n        steps: this.steps,\n        origin: this.origin,\n        lookat: this.lookat\n      },\n      undefined,\n      2\n    );\n    window.prompt('Copy to clipboard: Ctrl+C, Enter', data);\n  };\n\n  /**\n   * Dispose\n   *\n   * @memberof CameraDolly\n   */\n  dispose = () => {\n    for (let i = 0; i < this.controls.children.length; i++) {\n      this.controls.children[i].removeEventListener('dragging-changed', this.onTransformDragChanged);\n    }\n  };\n}\n","import { PerspectiveCamera, Group, Vector3 } from 'three';\nimport { TweenMax, Power1 } from 'gsap/gsap-core';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { GUI } from 'dat.gui';\nimport Dolly from './camera-dolly';\nimport type DollyData from './camera-dolly';\nimport type HelperOptions from './camera-dolly';\nimport { GUIWrapper } from '../../utils/gui';\n\nexport type CameraDollyManagerOptions = {|\n  gui: GUI,\n  guiOpen: boolean\n|};\n\nexport type DollyOptions = {|\n  gui: GUI,\n  guiOpen?: boolean\n|};\n\nexport default class CameraDollyManager {\n  dollies: {\n    [key: string]: Dolly\n  };\n  time: number;\n  gui: GUI;\n  tracksGui: GUI;\n  group: Group;\n  dollyId: string;\n  dollyIds: string[];\n  lookat: Vector3;\n  camera: PerspectiveCamera;\n  options: CameraDollyManagerOptions;\n\n  constructor(options: CameraDollyManagerOptions) {\n    // Current playback time 0 - 1\n    this.time = 0;\n\n    // Container for any 3d objects\n    this.group = new Group();\n\n    // Dollies added\n    this.dollies = {};\n\n    // Active dolly id\n    this.dollyId = '';\n\n    // Array of dolly track ids\n    this.dollyIds = [];\n\n    // Lookat vector\n    this.lookat = new Vector3();\n\n    // Active camera\n    this.camera = null;\n\n    this.options = options;\n\n    // Create GUI instance\n    if (options.gui) {\n      this.gui = options.gui.addFolder('camera dolly manager');\n      if (options.guiOpen) this.gui.open();\n\n      this.gui\n        .add(this, 'time', 0, 1)\n        .listen()\n        .onChange(this.update);\n    } else {\n      this.gui = new GUIWrapper();\n    }\n\n    // Add tracks GUI\n    // Since the list can change if more dollies are added\n    // We recreate this gui everytime addTransition is called\n    this.tracksGui = this.gui.addFolder('tracks');\n    this.tracksGui.open();\n  }\n\n  /**\n   * Add a transition\n   * Note two camereas are required for the transform controls to work\n   *\n   * @param {string} id\n   * @param {DollyData} data\n   * @param {PerspectiveCamera} cameraMain\n   * @param {PerspectiveCamera} cameraDev\n   * @param {OrbitControls} control\n   * @memberof CameraDollyManager\n   */\n  addTransition(\n    id: string,\n    data: DollyData,\n    cameraMain: PerspectiveCamera,\n    cameraDev: PerspectiveCamera,\n    control: OrbitControls,\n    helperOptions: HelperOptions\n  ) {\n    this.dollies[id] = new Dolly(id, data, this.gui, cameraDev, control, helperOptions);\n    this.dollies[id].on('rebuild', this.update);\n    this.group.add(this.dollies[id].group);\n    this.setTransition(id, cameraMain);\n  }\n\n  /**\n   * Set the current transition\n   *\n   * @param {string} id\n   * @param {PerspectiveCamera} camera\n   * @memberof CameraDollyManager\n   */\n  setTransition(id: string, camera: PerspectiveCamera) {\n    // Set the new dolly id\n    this.dollyId = id;\n\n    // Add the id to the dolly list\n    if (!this.dollyIds.includes(id)) this.dollyIds.push(id);\n\n    // Remove and recreate the tracks gui\n    this.gui.removeFolder(this.tracksGui.name);\n    this.tracksGui = this.gui.addFolder('tracks');\n    this.tracksGui.open();\n    this.tracksGui.add(this, 'dollyId', this.dollyIds).onChange(this.onTrackChange);\n\n    // Set the active camera\n    this.camera = camera;\n\n    // Show the active dolly path, if helpers are visible\n    Object.keys(this.dollies).forEach((key: string) => {\n      const visible = key === id;\n      this.dollies[key].toggleVisibility(visible);\n    });\n\n    // Update camera\n    this.update();\n  }\n\n  /**\n   * Switch to the new track\n   *\n   * @memberof CameraDollyManager\n   */\n  onTrackChange = (value: string) => {\n    this.setTransition(value, this.camera);\n  };\n\n  /**\n   * Animate the current track\n   *\n   * @param {number} [duration=1]\n   * @param {Object} [ease=Power1.easeOut]\n   * @memberof CameraDollyManager\n   */\n  async transition(duration: number = 1, ease: Object = Power1.easeOut) {\n    await new Promise((resolve, reject) => {\n      TweenMax.killTweensOf(this);\n      this.time = 0;\n      this.update();\n      TweenMax.to(this, duration, {\n        time: 1,\n        ease,\n        onUpdate: () => {\n          this.update();\n        },\n        onComplete: () => {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Stop current playback\n   *\n   * @memberof CameraDollyManager\n   */\n  stop() {\n    TweenMax.killTweensOf(this);\n  }\n\n  /**\n   * Update camera position and playback\n   *\n   * @memberof CameraDollyManager\n   */\n  update = () => {\n    if (this.dollies[this.dollyId] === undefined) return;\n    const { origin, lookat } = this.dollies[this.dollyId].getCameraDataByTime(this.time);\n    this.camera.position.set(origin.x, origin.y, origin.z);\n    this.lookat.set(lookat.x, lookat.y, lookat.z);\n    this.camera.lookAt(this.lookat);\n  };\n\n  /**\n   * Dispose\n   *\n   * @memberof CameraDollyManager\n   */\n  dispose() {\n    this.stop();\n    Object.keys(this.dollies).forEach((id: string) => {\n      this.dollies[id].dispose();\n    });\n    if (this.options.gui) {\n      this.options.gui.removeFolder(this.gui.name);\n    }\n  }\n}\n","import { CameraHelper } from 'three';\nimport { Power1 } from 'gsap';\nimport BaseScene from '../base/base-scene';\nimport Ambient from '../../lights/ambient';\nimport Directional from '../../lights/directional';\nimport assets from './assets';\nimport CameraDollyManager from '../../cameras/camera-dolly/camera-dolly-manager';\nimport { resetCamera } from '../../cameras/cameras';\nimport settings from '../../settings';\n\nexport const CAMERA_TRANSITION_SCENE_ID = 'camera-transitions';\n\nexport default class CameraTransitionsScene extends BaseScene {\n  constructor() {\n    const lights = [new Ambient(), new Directional()];\n    super({ id: CAMERA_TRANSITION_SCENE_ID, assets, gui: true, guiOpen: true, lights, controls: true });\n    resetCamera(this.camera, 20);\n  }\n\n  /**\n   * Create and setup any objects for the scene\n   *\n   * @memberof CameraTransitionsScene\n   */\n  async createSceneObjects() {\n    await new Promise((resolve, reject) => {\n      try {\n        // Disable main control sincw we're using the camera dolly\n        this.controls.main.enabled = false;\n\n        // Show dev camera view during this scene\n        settings.devCamera = true;\n\n        this.gui.add(this, 'play');\n        this.gui.add(this, 'stop');\n\n        // Create a camera helper to see the main camera easier\n        const helper = new CameraHelper(this.cameras.main);\n        this.scene.add(helper);\n\n        // Require camera dolly tracks\n        const tracks = {\n          'track 0': require('./data/dolly-data-0.json'),\n          'track 1': require('./data/dolly-data-1.json')\n        };\n\n        this.trackIds = Object.keys(tracks);\n        this.trackIndex = 1;\n\n        // Create camera dolly manager\n        this.cameraDollyManager = new CameraDollyManager({\n          gui: this.gui,\n          guiOpen: true\n        });\n        this.scene.add(this.cameraDollyManager.group);\n\n        // Add tracks to the manager\n        Object.keys(tracks).forEach((id: string) => {\n          this.cameraDollyManager.addTransition(\n            id,\n            tracks[id],\n            this.cameras.main,\n            this.cameras.dev,\n            this.controls.dev,\n            {\n              linesVisible: true,\n              controlsVisible: false,\n              pointsVisible: true\n            }\n          );\n        });\n\n        this.play();\n\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Play the current camera dolly track\n   *\n   * @memberof CameraTransitionsScene\n   */\n  play = () => {\n    this.animateCamera();\n  };\n\n  /**\n   * Stop the current camera dolly track\n   *\n   * @memberof CameraTransitionsScene\n   */\n  stop = () => {\n    this.cameraDollyManager.stop();\n  };\n\n  /**\n   * Cycle through camera dolly tracks\n   *\n   * @memberof CameraTransitionsScene\n   */\n  animateCamera() {\n    this.cameraDollyManager.setTransition(this.trackIds[this.trackIndex], this.cameras.main);\n    this.cameraDollyManager.transition(5, Power1.easeOut).then(() => {\n      this.trackIndex++;\n      this.trackIndex %= this.trackIds.length;\n      this.animateCamera();\n    });\n  }\n}\n","import { WebGLRenderTarget, LinearFilter, RGBAFormat, PerspectiveCamera } from 'three';\nimport { GUI } from 'dat.gui';\nimport { saveAs } from 'file-saver';\nimport createCanvas from './canvas';\nimport { rendererSize } from '../rendering/resize';\nimport renderer, { postProcessing } from '../rendering/renderer';\nimport BaseScene from '../scenes/base/base-scene';\n\nconst DEBUG_RENDER = false;\n\n/**\n * This screenshot utility renders out a custom size render and saves it to an image\n * Please note if the post processing passes change it will require updating\n *\n * @export\n * @class Screenshot\n */\nexport default class Screenshot {\n  gui: GUI;\n  renderTargetA: WebGLRenderTarget;\n  renderTargetB: WebGLRenderTarget;\n  imageData: ImageData;\n  canvas: HTMLCanvasElement;\n  canvasFlipped: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  ctxFlipped: CanvasRenderingContext2D;\n  width: number;\n  height: number;\n  pixelBuffer: Uint8Array;\n\n  constructor(gui: GUI, width: number, height: number, pixelRatio: number = 1) {\n    this.gui = gui.addFolder('screenshot');\n    this.gui.open();\n    this.width = width * pixelRatio;\n    this.height = height * pixelRatio;\n\n    this.renderTargetA = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBAFormat,\n      stencilBuffer: false\n    });\n    this.renderTargetB = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBAFormat,\n      stencilBuffer: false\n    });\n\n    const { canvas, ctx } = createCanvas(this.width, this.height);\n    const { canvas: canvasFlipped, ctx: ctxFlipped } = createCanvas(this.width, this.height);\n\n    this.canvas = canvas;\n    this.canvasFlipped = canvasFlipped;\n    this.ctx = ctx;\n    this.ctxFlipped = ctxFlipped;\n\n    this.pixelBuffer = new Uint8Array(this.renderTargetA.width * this.renderTargetA.height * 4);\n    this.imageData = this.ctxFlipped.createImageData(this.canvas.width, this.canvas.height);\n\n    if (DEBUG_RENDER) {\n      Object.assign(this.canvas.style, {\n        position: 'absolute',\n        top: '0',\n        left: '0',\n        zIndex: '100',\n        border: '1px solid white',\n        pointerEvents: 'none',\n        width: `${width}px`,\n        height: `${height}px`\n      });\n      if (document.body) document.body.appendChild(this.canvas);\n    }\n  }\n\n  /**\n   * Save the canvas to an image\n   *\n   * @memberof Screenshot\n   */\n  save = () => {\n    const quality = 0.75;\n    const filename = 'screenshot.jpg';\n    const format = 'image/jpeg';\n    this.canvas.toBlob(\n      function(blob) {\n        saveAs(blob, filename);\n      },\n      format,\n      quality\n    );\n  };\n\n  /**\n   * Capture the current scene and save to an image\n   *\n   * @memberof Screenshot\n   */\n  capture = (scene: BaseScene, camera: PerspectiveCamera) => {\n    // Clear current context\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // Save aspect for resetting after render\n    const aspect = camera.aspect;\n\n    // Update aspect to the screenshot size ratio\n    camera.aspect = this.width / this.height;\n    camera.updateProjectionMatrix();\n\n    // Save current width / height\n    const finalPassWidth = postProcessing.finalPass.mesh.material.uniforms.resolution.value.x;\n    const finalPassHeight = postProcessing.finalPass.mesh.material.uniforms.resolution.value.y;\n    const left = 0;\n    const bottom = 0;\n    const width = rendererSize.x;\n    const height = rendererSize.y;\n\n    // Update renderer viewport, this will get reset in the main render loop\n    // inside webgl-app.js\n    renderer.setViewport(left, bottom, width, height);\n    renderer.setScissor(left, bottom, width, height);\n\n    // Update the final pass uniforms\n    postProcessing.finalPass.resize(this.width, this.height);\n\n    // Render the current scene into renderTargetA\n    renderer.setRenderTarget(this.renderTargetA);\n    renderer.render(scene, camera);\n    renderer.setRenderTarget(null);\n\n    // Apply the post processing fx which is output into renderTargetB\n    postProcessing.finalPass.screenshotRender(scene, camera, this.renderTargetA, this.renderTargetB, 0);\n    // Put the rendered pixels into the pixelBuffer\n    renderer.readRenderTargetPixels(\n      this.renderTargetB,\n      0,\n      0,\n      this.renderTargetB.width,\n      this.renderTargetB.height,\n      this.pixelBuffer\n    );\n    this.imageData.data.set(this.pixelBuffer);\n\n    // The image is rendered upside down, so we flip it\n    this.ctxFlipped.putImageData(this.imageData, 0, 0);\n    this.ctx.save();\n    this.ctx.scale(1, -1);\n    this.ctx.drawImage(this.canvasFlipped, 0, -this.canvas.height, this.canvas.width, this.canvas.height);\n    this.ctx.restore();\n\n    // Reset the camera aspect\n    camera.aspect = aspect;\n    camera.updateProjectionMatrix();\n\n    // Reset the finalpass uniforms\n    postProcessing.finalPass.resize(finalPassWidth, finalPassHeight);\n\n    // Save out the image\n    this.save();\n  };\n}\n","import EventEmitter from 'eventemitter3';\nimport { Clock, Vector4, PerspectiveCamera } from 'three';\nimport renderer, { postProcessing } from './rendering/renderer';\nimport { setRendererSize, rendererSize } from './rendering/resize';\nimport settings from './settings';\nimport { rendererStats } from './utils/stats';\nimport { setQuery, getQueryFromParams } from './utils/query-params';\nimport { gui } from './utils/gui';\nimport PreloaderScene, { PRELOADER_SCENE_ID } from './scenes/preloader/preloader-scene';\nimport AppState from './app-state';\nimport LandingScene, { LANDING_SCENE_ID } from './scenes/landing/landing-scene';\nimport CameraTransitionScene, {\n  CAMERA_TRANSITION_SCENE_ID\n} from './scenes/camera-transitions/camera-transitions-scene';\nimport Screenshot from './utils/screenshot';\n\nclass WebGLApp extends EventEmitter {\n  /**\n   * Creates an instance of WebGLApp.\n   * @param {HTMLElement} parent\n   * @memberof WebGLApp\n   */\n  constructor(parent: HTMLElement) {\n    super();\n    // Append the renderer canvas to the component reference\n    parent.appendChild(renderer.domElement);\n\n    // Clock for elapsed time and delta\n    this.clock = new Clock(true);\n\n    // Current request animation frame id\n    this.rafId = 0;\n\n    // Current frame delta\n    this.delta = 0;\n\n    // Flag to prevent multiple raf's running\n    this.isRendering = false;\n\n    // Initial state\n    this.state = new AppState({ ready: false });\n\n    // Scenes map\n    this.scenes = {\n      [PRELOADER_SCENE_ID]: PreloaderScene,\n      [LANDING_SCENE_ID]: LandingScene,\n      [CAMERA_TRANSITION_SCENE_ID]: CameraTransitionScene\n    };\n    // List of ids to switch between\n    const sceneIds = [LANDING_SCENE_ID, CAMERA_TRANSITION_SCENE_ID];\n\n    // The target scene id\n    this.sceneId = LANDING_SCENE_ID;\n    if (sceneIds.includes(getQueryFromParams('sceneId'))) {\n      this.sceneId = getQueryFromParams('sceneId');\n    }\n\n    this.viewport = {\n      debug: new Vector4(\n        0,\n        0,\n        rendererSize.x * settings.viewportPreviewScale,\n        rendererSize.y * settings.viewportPreviewScale\n      ),\n      main: new Vector4(0, 0, rendererSize.x, rendererSize.y)\n    };\n\n    // Add screenshot utility\n    this.screenshot = new Screenshot(gui, 1280, 720, 2);\n    this.screenshot.gui.add(this, 'captureScreenshot').name('capture');\n\n    // Gui settings group\n    const guiSettings = gui.addFolder('settings');\n    guiSettings.open();\n\n    // Toggle between dev and scene camera\n    guiSettings.add(settings, 'devCamera').onChange((value: string) => {\n      setQuery('devCamera', value);\n      postProcessing.resize();\n      this.currentScene.toogleCameras(value);\n    });\n\n    // Toggle scene helpers\n    guiSettings.add(settings, 'helpers').onChange((value: string) => {\n      setQuery('helpers', value);\n      this.currentScene.toggleHelpers(value);\n    });\n\n    // Toggle between scenes\n    guiSettings\n      .add(this, 'sceneId', sceneIds)\n      .onChange((value: string) => {\n        this.setScene(value);\n        setQuery('sceneId', value);\n      })\n      .listen();\n  }\n\n  captureScreenshot = () => {\n    this.screenshot.capture(this.currentScene.scene, this.currentScene.camera);\n  };\n\n  /**\n   * Setup any\n   *\n   * @memberof WebGLApp\n   */\n  async setup() {\n    await new Promise((resolve, reject) => {\n      try {\n        // Setup the preloader scene right away as we need a scene to render on page load\n        this.setScene(PRELOADER_SCENE_ID)\n          .then(resolve)\n          .catch(reject);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Set the new state\n  setState = (state: AppState) => {\n    if (state.equals(this.state)) return;\n    this.prevState = this.state.clone();\n    this.state = state;\n    this.onStateChanged(this.state);\n  };\n\n  onStateChanged = (state: AppState) => {\n    if (this.state.ready && this.state.ready !== this.prevState.ready) {\n      this.setScene(this.sceneId);\n    }\n  };\n\n  /**\n   * Set the current scene to render\n   * The scene should be inheritted from BaseScene\n   *\n   * @param {BaseScene} scene\n   * @memberof WebGLApp\n   */\n  async setScene(sceneId: string) {\n    await new Promise((resolve, reject) => {\n      if (this.currentScene && sceneId === this.currentScene.id) return;\n      // Create new scene instance\n      const scene = new this.scenes[sceneId]();\n      scene\n        .setup()\n        .then(() => {\n          // Cache the previous scene\n          const previousScene = this.currentScene;\n          // Callback when the previous scene has animated out\n          const nextScene = () => {\n            // Set the current scene\n            this.currentScene = scene;\n            // Animate the scene in\n            this.currentScene.animateIn().then(resolve, reject);\n            // Update the post processing scene transition pass\n            postProcessing.setScenes(postProcessing.sceneB, scene);\n            postProcessing.transitionPass.transition().then(() => {\n              // After the transition has ended, dispose of any objects\n              if (previousScene) previousScene.dispose();\n            });\n          };\n          // If the previous scene exists, animate out\n          if (previousScene) {\n            previousScene\n              .animateOut()\n              .then(nextScene)\n              .catch(reject);\n          } else {\n            // Otherwise go to the next scene immediately\n            nextScene();\n          }\n        })\n        .catch(reject);\n    });\n  }\n\n  /**\n   * resize handler\n   *\n   * @memberof WebGLApp\n   */\n  resize = (width: number, height: number) => {\n    setRendererSize(renderer, width, height);\n    this.currentScene.resize(width, height);\n    postProcessing.resize();\n    this.viewport.debug.set(\n      0,\n      0,\n      rendererSize.x * settings.viewportPreviewScale,\n      rendererSize.y * settings.viewportPreviewScale\n    );\n    this.viewport.main.set(0, 0, rendererSize.x, rendererSize.y);\n  };\n\n  /**\n   * Render the scene within viewport coordinates\n   *\n   * @memberof WebGLApp\n   */\n  renderScene = (camera: PerspectiveCamera, viewport: Vector4, delta: number, usePostProcessing: boolean) => {\n    renderer.setViewport(viewport.x, viewport.y, viewport.z, viewport.w);\n    renderer.setScissor(viewport.x, viewport.y, viewport.z, viewport.w);\n\n    if (usePostProcessing) {\n      postProcessing.render(delta);\n    } else {\n      this.currentScene.update(this.delta);\n      renderer.setClearColor(this.currentScene.clearColor);\n      renderer.render(this.currentScene.scene, camera);\n    }\n  };\n\n  /**\n   * Toggle the rendering and animation loop\n   *\n   * @memberof WebGLApp\n   */\n  render = (render: boolean) => {\n    if (this.isRendering === render) return;\n    this.isRendering = render;\n    if (render) {\n      this.update();\n    } else {\n      cancelAnimationFrame(this.rafId);\n    }\n  };\n\n  /**\n   * Main render loop and update of animations\n   *\n   * @memberof WebGLApp\n   */\n  update = () => {\n    this.rafId = requestAnimationFrame(this.update);\n    this.delta = this.clock.getDelta();\n\n    if (settings.devCamera) {\n      this.renderScene(this.currentScene.cameras.dev, this.viewport.main, this.delta, false);\n      this.renderScene(this.currentScene.cameras.main, this.viewport.debug, this.delta, true);\n    } else {\n      this.renderScene(this.currentScene.cameras.main, this.viewport.main, this.delta, true);\n    }\n\n    if (settings.stats) {\n      rendererStats.update(renderer);\n    }\n  };\n}\n\nexport default WebGLApp;\n","import React from 'react';\nimport { TweenLite } from 'gsap/gsap-core';\nimport './App.css';\nimport WebGLApp from './webgl-app/webgl-app';\nimport AppState from './webgl-app/app-state';\n\ntype Props = {};\n\ntype State = {|\n  ready: boolean,\n  windowSize: { width: number, height: number }\n|};\n\nclass App extends React.PureComponent<Props, State> {\n  state = {\n    ready: false,\n    windowSize: { width: window.innerWidth, height: window.innerHeight }\n  };\n\n  componentDidMount() {\n    if (this.container === null) return;\n    this.webglApp = new WebGLApp(this.container);\n    this.webglApp\n      .setup()\n      .then(() => {\n        this.webglApp.setState(new AppState(this.state));\n        this.webglApp.render(true);\n        TweenLite.delayedCall(1, this.onReady);\n      })\n      .catch((error: String) => {\n        console.log(error);\n      });\n\n    window.addEventListener('resize', this.onResize);\n  }\n\n  componentDidUpdate(prevProps: Object, prevState: Object) {\n    if (this.container === null) return;\n\n    this.webglApp.setState(new AppState(this.state));\n\n    if (\n      this.state.windowSize.width !== prevState.windowSize.width ||\n      this.state.windowSize.height !== prevState.windowSize.height\n    ) {\n      // Resize the app\n      this.webglApp.resize(this.state.windowSize.width, this.state.windowSize.height);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.container === null) return;\n    this.webglApp.render(false);\n    window.removeEventListener('resize', this.onResize);\n  }\n\n  container: HTMLElement | null;\n  webglApp: WebGLApp;\n\n  onReady = () => {\n    this.setState({\n      ready: true\n    });\n  };\n\n  onResize = () => {\n    this.setState({\n      windowSize: { width: window.innerWidth, height: window.innerHeight }\n    });\n  };\n\n  render() {\n    return (\n      <div\n        className=\"App\"\n        ref={(node: HTMLElement | null) => {\n          this.container = node;\n        }}\n      ></div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst root = document.getElementById('root');\nif (root) ReactDOM.render(<App />, root);\n"],"sourceRoot":""}